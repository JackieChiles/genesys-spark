/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { GuxAccordionLegacyArrowPosition } from "./components/legacy/gux-accordion-legacy/gux-accordion.types";
import { GuxAccordionSectionArrowPosition, GuxAccordionSectionContentLayout } from "./components/stable/gux-accordion/gux-accordion-section/gux-accordion-section.types";
import { GuxActionButtonAccent, GuxActionButtonType } from "./components/stable/gux-action-button/gux-action-button.types";
import { GuxButtonAccent, GuxButtonType } from "./components/legacy/gux-action-button-legacy/gux-button.types";
import { GuxAnnouncePoliteness } from "./components/beta/gux-announce/gux-announce.types";
import { GuxBadgeColor } from "./components/beta/gux-badge/gux-badge.types";
import { GuxBreadcrumbAccent } from "./components/stable/gux-breadcrumbs/gux-breadcrumbs.types";
import { GuxButtonAccent as GuxButtonAccent1, GuxButtonType as GuxButtonType1 } from "./components/stable/gux-button/gux-button.types";
import { GuxButtonMultiAccent } from "./components/stable/gux-button-multi/gux-button-multi.types";
import { GuxCalendarDayOfWeek, GuxCalendarMode } from "./components/stable/gux-calendar/gux-calendar.types";
import { GuxCardAccent } from "./components/beta/gux-card/gux-card.types";
import { EmbedOptions, VisualizationSpec } from "vega-embed";
import { GuxOrder, InternalKeyboardReorderMove, InternalOrderChange } from "./components/beta/gux-column-manager/gux-column-manager.types";
import { GuxDateTimeFormat } from "./i18n/DateTimeFormatter";
import { GuxDatepickerMode } from "./components/stable/gux-datepicker/gux-datepicker.types";
import { GuxDisclosureButtonPosition } from "./components/stable/gux-disclosure-button/gux-disclosure-button.types";
import { GuxDismissButtonPosition } from "./components/stable/gux-dismiss-button/gux-dismiss-button.types";
import { GuxFilterTypes } from "./components/stable/gux-dropdown/gux-dropdown.types";
import { GuxFormFieldLabelPosition } from "./components/stable/gux-form-field/gux-form-field.types";
import { GuxInputTextAreaResize } from "./components/legacy/gux-form-field-legacy/components/gux-input-textarea/gux-input-textarea.types";
import { GuxFormFieldLabelPosition as GuxFormFieldLabelPosition1 } from "./components/legacy/gux-form-field-legacy/gux-form-field.types";
import { GuxFormFieldTextAreaResize } from "./components/stable/gux-form-field/components/gux-form-field-textarea/gux-form-field-textarea.types";
import { GuxIconIconName } from "./components/stable/gux-icon/gux-icon.types";
import { GuxAlertAccent } from "./components/beta/gux-alert/gux-inline-alert.types";
import { GuxTextHighlightStrategy } from "./components/stable/gux-text-highlight/gux-text-highlight.types";
import { GuxModalSize } from "./components/stable/gux-modal/gux-modal.types";
import { GuxISOYearMonth } from "./utils/date/year-month-values";
import { GuxNotificationToastAccent } from "./components/stable/gux-notification-toast/gux-notification-toast.types";
import { GuxItemsPerPage, GuxPaginationLayout, GuxPaginationState } from "./components/stable/gux-pagination/gux-pagination.types";
import { GuxItemsPerPage as GuxItemsPerPage1, GuxPaginationLayoutBeta } from "./components/beta/gux-pagination-beta/gux-pagination-beta.types";
import { GuxPaginationCursorDetail } from "./components/stable/gux-pagination-cursor/gux-pagination-cursor.types";
import { PopperPosition } from "./components/stable/gux-popover/gux-popover.types";
import { Placement } from "@floating-ui/dom";
import { PopperPosition as PopperPosition1 } from "./components/stable/gux-popover-list/gux-popover-list.types";
import { GuxRadialLoadingContext } from "./components/stable/gux-radial-loading/gux-radial-loading.types";
import { GuxRadialProgressScale } from "./components/stable/gux-radial-progress/gux-radial-progress.types";
import { GuxSimpleToastAccent } from "./components/stable/gux-simple-toast/gux-simple-toast.types";
import { GuxTableSelectedState, GuxTableSortState } from "./components/beta/gux-table/gux-table.types";
import { GuxSwitchAllowedLayouts } from "./components/stable/gux-switch/gux-switch.types";
import { GuxTableToolbarActionTypes } from "./components/beta/gux-table-toolbar/gux-table-toolbar-action/gux-table-toolbar-action.types";
import { GuxTableToolbarActionAccent } from "./components/beta/gux-table-toolbar/gux-table-toolbar-action-accents.types";
import { GuxTabsAlignment, GuxTabsOrientation } from "./components/stable/gux-tabs/gux-tabs-types";
import { GuxTagColor } from "./components/beta/gux-tag/gux-tag.types";
import { GuxClockType, GuxISOHourMinute, GuxMinuteInterval, GuxMinuteStep } from "./components/beta/gux-time-picker/gux-time-picker.type";
import { GuxToggleLabelPosition } from "./components/stable/gux-toggle/gux-toggle.types";
export namespace Components {
    interface GuxAccordion {
        "singleOpenSection": boolean;
    }
    interface GuxAccordionLegacy {
        "arrowPosition": GuxAccordionLegacyArrowPosition;
        /**
          * Closes a section.
          * @param slotName The slot name
         */
        "close": (slotName: string) => Promise<void>;
        /**
          * The heading level within the page the accordion section headers should be set to. heading-level="3" woudl be equivalent to an h3 element.
         */
        "headingLevel": number;
        /**
          * Opens a section.
          * @param slotName The slot name
         */
        "open": (slotName: string) => Promise<void>;
        /**
          * Toggles a section.
          * @param slotName The slot name
         */
        "toggle": (slotName: string) => Promise<void>;
    }
    interface GuxAccordionSection {
        /**
          * Position of the arrow chevron icon. Position can be 'default' or 'before-text'.  'beside-text' is deprecated and will be removed in v4.
         */
        "arrowPosition": GuxAccordionSectionArrowPosition;
        /**
          * The content layout used in the accordion section. 'text' layout provides default padding, 'custom' removes default padding.
         */
        "contentLayout": GuxAccordionSectionContentLayout;
        "disabled": boolean;
        "open": boolean;
        "reverseHeadings": boolean;
    }
    interface GuxActionButton {
        "accent": GuxActionButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled": boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen": boolean;
        /**
          * The component text.
         */
        "text": string;
        /**
          * The component button type
         */
        "type": GuxActionButtonType;
    }
    interface GuxActionButtonLegacy {
        "accent": GuxButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled": boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen": boolean;
        /**
          * The component text.
         */
        "text": string;
        /**
          * The component button type
         */
        "type": GuxButtonType;
    }
    interface GuxActionItem {
        "disabled": boolean;
        "text": string;
        "value": unknown;
    }
    interface GuxActionListDivider {
    }
    interface GuxActionListLegacy {
        /**
          * Returns whether the first item in the list is selected.
         */
        "isFirstItemSelected": () => Promise<boolean>;
        /**
          * Returns whether the last item in the list is selected.
         */
        "isLastItemSelected": () => Promise<boolean>;
        "setFocusOnFirstItem": () => Promise<void>;
        "setFocusOnLastItem": () => Promise<void>;
    }
    interface GuxActionToast {
    }
    interface GuxAdvancedDropdown {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled": boolean;
        /**
          * CSS string used to set the maximum height of the dropdown option container. Default is set to 10 options as defined by UX.
         */
        "dropdownHeight": string;
        /**
          * Timeout between filter input changed and event being emitted.
         */
        "filterDebounceTimeout": number;
        /**
          * Gets the currently selected values.
          * @returns The array of selected values.
         */
        "getSelectedValues": () => Promise<string[]>;
        /**
          * Whether the list should filter its current options.
         */
        "noFilter": boolean;
        /**
          * The dropdown's placeholder.
         */
        "placeholder": string;
        "setLabeledBy": (id: string) => Promise<void>;
    }
    interface GuxAllRowSelect {
        "selected": boolean;
        "setIndeterminate": (indeterminate?: boolean) => Promise<void>;
    }
    interface GuxAnnounceBeta {
        "guxAnnounce": (text: string) => Promise<void>;
        "politeness": GuxAnnouncePoliteness;
    }
    interface GuxBadgeBeta {
        /**
          * Bold badge.
         */
        "bold": boolean;
        /**
          * Badge background color.
         */
        "color": GuxBadgeColor;
    }
    interface GuxBlankStateBeta {
    }
    interface GuxBreadcrumbItem {
        "href": string;
    }
    interface GuxBreadcrumbs {
        "accent": GuxBreadcrumbAccent;
    }
    interface GuxButton {
        "accent": GuxButtonAccent1;
        /**
          * Indicate if the button is disabled or not
         */
        "disabled": boolean;
        /**
          * The component title
         */
        "guxTitle": string;
        /**
          * The component button type
         */
        "type": GuxButtonType1;
    }
    interface GuxButtonMulti {
        "accent": GuxButtonMultiAccent;
        /**
          * Disables the action button.
         */
        "disabled": boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen": boolean;
        /**
          * The component text.
         */
        "text": string;
    }
    interface GuxButtonMultiLegacy {
        "accent": GuxButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled": boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen": boolean;
        /**
          * The component text.
         */
        "text": string;
    }
    interface GuxButtonSlotBeta {
        "accent": GuxButtonAccent1;
    }
    interface GuxCalendar {
        /**
          * Focus the preview date
         */
        "focusPreviewDate": () => Promise<void>;
        /**
          * The max date selectable
         */
        "maxDate": string;
        /**
          * The min date selectable
         */
        "minDate": string;
        /**
          * The calendar mode (can be single or range)
         */
        "mode": GuxCalendarMode;
        /**
          * The calendar number of months displayed
         */
        "numberOfMonths": number;
        /**
          * Reset calendar view to show first selected date
         */
        "resetCalendarView": (value: Date) => Promise<void>;
        /**
          * Sets new value and rerender the calendar
         */
        "setValue": (value: Date | [Date, Date]) => Promise<void>;
        /**
          * The day of the week to start each calendar row. ISO weekday number ie 1 - Monday, 2 - Tuesday, ... 7 - Sunday
         */
        "startDayOfWeek": GuxCalendarDayOfWeek;
        /**
          * The calendar current selected date
         */
        "value": string;
    }
    interface GuxCardBeta {
        /**
          * Card Accent.
         */
        "accent": GuxCardAccent;
    }
    interface GuxChartColumnBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData": Record<string, any>;
        /**
          * List specifying the order of optional chart layers. For correct chart layering, each chartData entry must also include a "series" field with a value indicating which layer the entry belongs to, e.g 'series': 'group1'
         */
        "chartLayers": string[];
        "embedOptions": EmbedOptions;
        "includeLegend": boolean;
        "legendPosition": | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle": string;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName": string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant": boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName": string;
    }
    interface GuxChartDonutBeta {
        "centerSubText": string;
        "centerText": string;
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData": Record<string, any>;
        "colorFieldName": string;
        "embedOptions": EmbedOptions;
        "gauge": boolean;
        "includeLegend": boolean;
        "innerRadius": number;
        "labelField": string;
        "labelRadius": number;
        "legendFontSize": number;
        "legendPosition": | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        "legendSymbolSize": number;
        "legendTitle": string;
        "legendX": number;
        "legendY": number;
        "outerRadius": number;
        "showTooltip": boolean;
        "tooltipOptions": EmbedOptions;
    }
    interface GuxChartLineBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData": Record<string, any>;
        "colorFieldName": string;
        "embedOptions": EmbedOptions;
        "includeDataPointMarkers": boolean;
        "includeLegend": boolean;
        "interpolation": string;
        "legendPosition": | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle": string;
        "strokeDash": boolean;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName": string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant": boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName": string;
    }
    interface GuxChartPieBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData": Record<string, any>;
        "colorFieldName": string;
        "embedOptions": EmbedOptions;
        "includeLegend": boolean;
        "labelField": string;
        "labelRadius": number;
        "legendPosition": | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        "legendTitle": string;
        "outerRadius": number;
    }
    interface GuxChartScatterPlotBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData": Record<string, any>;
        /**
          * Type of category to plot in the chart
         */
        "colorFieldName": string;
        "embedOptions": EmbedOptions;
        "includeLegend": boolean;
        "legendPosition": | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle": string;
        /**
          * The shape of the plotting in the chart - Square, Circle and Point
         */
        "useShape": string;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName": string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant": boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle": string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName": string;
    }
    interface GuxColorSelect {
    }
    interface GuxColumnManagerBeta {
    }
    interface GuxColumnManagerItem {
        "guxFocus": () => Promise<void>;
        "guxSetHighlight": (highlight?: string, highlightActive?: boolean) => Promise<void>;
        "orderId": string;
    }
    interface GuxCommandAction {
        /**
          * If the command is a common command. Common commands are choosen defaults a user might want to use.
         */
        "common": boolean;
        /**
          * Details about the command. This acts as extra contextual information about the command.
         */
        "details": string;
        "invokePress": () => Promise<void>;
        /**
          * If the command is a recent command. Recent commands are commands that the user has recently issued.
         */
        "recent": boolean;
        /**
          * The shortcut for the command. Textual representation of a shortcut associated with this command, if it exists.
         */
        "shortcut": string;
        /**
          * The textual value of the command.
         */
        "text": string;
    }
    interface GuxCommandPaletteLegacy {
        /**
          * Closes the command palette.
         */
        "close": () => Promise<void>;
        /**
          * Opens the command palette.
         */
        "open": () => Promise<void>;
    }
    interface GuxContentSearch {
        /**
          * Clears the input.
         */
        "clear": () => Promise<void>;
        /**
          * The Current match count which needs to highlighted
         */
        "currentMatch": number;
        /**
          * The Match Count
         */
        "matchCount": number;
    }
    interface GuxContextMenuBeta {
        /**
          * Screenreader text for context menu button defaults to "context menu"
         */
        "screenreaderText": string;
    }
    interface GuxCopyToClipboardBeta {
    }
    interface GuxCreateOption {
        "active": boolean;
        "filtered": boolean;
        "guxEmitInternalCreateNewOption": () => Promise<void>;
        "hidden": boolean;
        "value": string;
    }
    interface GuxDateBeta {
        /**
          * The ISO string representation of the date to format
         */
        "datetime": string;
        /**
          * Format option type
         */
        "format": GuxDateTimeFormat;
    }
    interface GuxDateTimeBeta {
        /**
          * The ISO string representation of the datetime to format
         */
        "datetime": string;
        /**
          * Format option type
         */
        "format": GuxDateTimeFormat;
    }
    interface GuxDatepicker {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled": boolean;
        /**
          * The datepicker date format (default to mm/dd/yyyy, or specified)
         */
        "format": string;
        /**
          * The datepicker label (can be a single label, or two separated by a comma if it's a range datepicker)
         */
        "label": string;
        /**
          * The max date selectable
         */
        "maxDate": string;
        /**
          * The min date selectable
         */
        "minDate": string;
        /**
          * The calendar mode (can be single or range)
         */
        "mode": GuxDatepickerMode;
        /**
          * The datepicker number of months displayed
         */
        "numberOfMonths": number;
        /**
          * The day of the week to start each calendar row. 1 - Monday, 2 - Tuesday, ... 7 - Sunday
         */
        "startDayOfWeek": GuxCalendarDayOfWeek;
        /**
          * The datepicker current value
         */
        "value": string;
    }
    interface GuxDisclosureButton {
        /**
          * Used to open or close the disclosure panel
         */
        "isOpen": boolean;
        /**
          * Indicates the label for the disclosure button
         */
        "label": string;
        /**
          * Indicates the position of the button panel
         */
        "position": GuxDisclosureButtonPosition;
    }
    interface GuxDismissButton {
        "position": GuxDismissButtonPosition;
    }
    /**
     * Our Dropdown component. In the most basic case, it's used with `gux-option` to give users
     * a list of text options to select from, but other types of options with different appearance
     * can be created by creating a new component and adding it to `validOptionTags` list in
     * gux-dropdown-types.ts, then following the resulting compiler errors.
     */
    interface GuxDropdown {
        "disabled": boolean;
        "filterType": GuxFilterTypes;
        /**
          * deprecated will be removed in v4 (COMUI-1369). Use filterType instead
         */
        "filterable": boolean;
        "hasError": boolean;
        "loading": boolean;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface GuxDropdownLegacy {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled": boolean;
        /**
          * Whether the user can filter or not.
         */
        "filterable": boolean;
        /**
          * Sets the select mode (default, page or palette).
         */
        "mode": 'default' | 'page' | 'palette';
        /**
          * The dropdown placeholder.
         */
        "placeholder": string;
        "setLabeledBy": (id: string) => Promise<void>;
        "setSelected": () => Promise<void>;
        /**
          * Indicate the dropdown input value
         */
        "value": string;
    }
    interface GuxDropdownMultiBeta {
        "disabled": boolean;
        /**
          * Override default filtering behavior
         */
        "filterType": GuxFilterTypes;
        /**
          * deprecated will be removed in v4 (COMUI-1369). Use filterType instead
         */
        "filterable": boolean;
        /**
          * Returns an array of the selected values
         */
        "getSelectedValues": () => Promise<string[]>;
        "hasError": boolean;
        "loading": boolean;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface GuxDropdownMultiTag {
        /**
          * Tag is removable.
         */
        "disabled": boolean;
        "numberSelected": number;
    }
    interface GuxDropdownOption {
        /**
          * If this Boolean attribute is set, this option is not checkable. It won't receive any browsing events, like mouse clicks or focus-related ones.
         */
        "disabled": boolean;
        /**
          * If this Boolean attribute is set, the option is not visible to the select control. This does not mean that it clears the selection if it was previously selected.  Should only be used by internal users.
         */
        "filtered": boolean;
        /**
          * Gets the value rendered by the drop down item.
         */
        "getDisplayedValue": () => Promise<string>;
        /**
          * If present, this Boolean attribute indicates that the option is currently selected.
         */
        "selected": boolean;
        /**
          * Determines if the search input matches this option.
          * @param searchInput The input string being searched for.
         */
        "shouldFilter": (searchInput: string) => Promise<boolean>;
        "text": string;
        /**
          * The content of this attribute represents the value to be submitted on 'input' changes, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value": string;
    }
    interface GuxErrorMessageBeta {
    }
    interface GuxFlyoutMenuBeta {
    }
    interface GuxFormFieldCheckbox {
    }
    interface GuxFormFieldColor {
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldDropdown {
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldInputClearButton {
    }
    interface GuxFormFieldLegacy {
        "clearable": boolean;
        "displayUnits": string;
        "labelPosition": GuxFormFieldLabelPosition1;
        "resize": GuxInputTextAreaResize;
        "valueInTooltip": boolean;
    }
    interface GuxFormFieldNumber {
        "clearable": boolean;
        "guxForceUpdate": () => Promise<void>;
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldPhone {
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldRadio {
    }
    interface GuxFormFieldRange {
        "displayUnits": string;
        "labelPosition": GuxFormFieldLabelPosition;
        "valueInTooltip": boolean;
    }
    interface GuxFormFieldSearch {
        "guxForceUpdate": () => Promise<void>;
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldSelect {
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldTextLike {
        "clearable": boolean;
        "guxForceUpdate": () => Promise<void>;
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldTextarea {
        "labelPosition": GuxFormFieldLabelPosition;
        "resize": GuxFormFieldTextAreaResize;
    }
    interface GuxFormFieldTimePicker {
        "labelPosition": GuxFormFieldLabelPosition;
    }
    interface GuxIcon {
        /**
          * Indicate whether the icon should be ignored by accessibility tools or not
         */
        "decorative": boolean;
        /**
          * Indicate which icon to display
         */
        "iconName": (string & {}) | GuxIconIconName;
        /**
          * Localized text describing the intent of this icon (not required if `decorative=true`)
         */
        "screenreaderText": string;
    }
    interface GuxInlineAlertBeta {
        "accent": GuxAlertAccent;
    }
    interface GuxInputCheckbox {
    }
    interface GuxInputColor {
        "guxErrorDescribedby": string;
        "guxLabelDescribedby": string;
        "guxRequired": boolean;
    }
    interface GuxInputColorOption {
        /**
          * Indicate if the tile is active
         */
        "active": boolean;
        /**
          * Indicate the color of the tile, if undefined, tile will be blank and be disabled
         */
        "value": string;
    }
    interface GuxInputNumber {
        "clearable": boolean;
    }
    interface GuxInputRadio {
    }
    interface GuxInputRange {
        "displayUnits": string;
        "valueInTooltip": boolean;
    }
    interface GuxInputSearch {
    }
    interface GuxInputSelect {
    }
    interface GuxInputTextLike {
        "clearable": boolean;
    }
    interface GuxInputTextarea {
        "resize": GuxInputTextAreaResize;
    }
    interface GuxList {
        "guxFocusFirstItem": () => Promise<void>;
        "guxFocusItemByClosestId": (id: string) => Promise<void>;
        "guxFocusItemById": (id: string) => Promise<void>;
        "guxFocusLastItem": () => Promise<void>;
    }
    interface GuxListDivider {
    }
    interface GuxListDividerLegacy {
    }
    interface GuxListItem {
        "disabled": boolean;
    }
    interface GuxListItemLegacy {
        /**
          * How the item should be highlighted.
         */
        "strategy": GuxTextHighlightStrategy;
        /**
          * The value to display.
         */
        "text": string;
        /**
          * The value associated with this item.
         */
        "value": any;
    }
    interface GuxListLegacy {
        /**
          * The highlight value
         */
        "highlight": string;
        /**
          * Returns whether the first item in the list is selected.
         */
        "isFirstItemSelected": () => Promise<boolean>;
        /**
          * Returns whether the last item in the list is selected.
         */
        "isLastItemSelected": () => Promise<boolean>;
        "setFocusOnFirstItem": () => Promise<void>;
        "setFocusOnLastItem": () => Promise<void>;
        /**
          * The current selection in the list.
         */
        "value": unknown;
    }
    /**
     * The listbox component provides keyboard bindings and a11y patterns for selecting
     * from a list of options.
     */
    interface GuxListbox {
        "filter": string;
        "filterType": GuxFilterTypes;
        "guxSelectActive": () => Promise<void>;
        "loading": boolean;
        "value": string;
    }
    interface GuxListboxMulti {
        "filter": string;
        "filterType": GuxFilterTypes;
        "guxSelectActive": () => Promise<void>;
        "hasExactMatch": boolean;
        "loading": boolean;
        "textInput": string;
        "value": string;
    }
    interface GuxLoadingMessageBeta {
    }
    interface GuxMenu {
    }
    interface GuxMenuOption {
        /**
          * Focus on the components button element
         */
        "guxFocus": () => Promise<void>;
    }
    interface GuxModal {
        /**
          * Query selector for the element to initially focus when the modal opens Defaults to the first tabbable element
         */
        "initialFocus"?: string | undefined;
        /**
          * Indicates the size of the modal (small, medium or large)
         */
        "size": GuxModalSize;
        "trapFocus": boolean;
    }
    interface GuxMonthCalendar {
        /**
          * Focus a month
         */
        "guxFocus": (iSOYearMonth: GuxISOYearMonth) => Promise<void>;
        /**
          * The max year and month selectable in ISO8601 format (yyyy-mm)
         */
        "max": GuxISOYearMonth;
        /**
          * The min year and month selectable in ISO8601 format (yyyy-mm)
         */
        "min": GuxISOYearMonth;
        /**
          * The current selected year and month in ISO8601 format (yyyy-mm)
         */
        "value": GuxISOYearMonth;
    }
    interface GuxMonthList {
        "guxFocusFirstItem": () => Promise<void>;
    }
    interface GuxMonthListItem {
        "disabled": boolean;
        "selected": boolean;
        "value": GuxISOYearMonth;
    }
    interface GuxMonthPickerBeta {
        "disabled": boolean;
        /**
          * The max year and month selectable in ISO8601 format (yyyy-mm)
         */
        "max": GuxISOYearMonth;
        /**
          * The min year and month selectable in ISO8601 format (yyyy-mm)
         */
        "min": GuxISOYearMonth;
        /**
          * The current selected year and month in ISO8601 format (yyyy-mm)
         */
        "value": GuxISOYearMonth;
    }
    interface GuxNotificationToast {
        /**
          * The component accent.
         */
        "accent": GuxNotificationToastAccent;
    }
    interface GuxOption {
        "active": boolean;
        "disabled": boolean;
        "filtered": boolean;
        "hovered": boolean;
        "selected": boolean;
        "value": string;
    }
    interface GuxOptionIcon {
        "active": boolean;
        "disabled": boolean;
        "filtered": boolean;
        "hovered": boolean;
        "iconColor": string;
        "iconName": string;
        "iconSrText": string;
        "selected": boolean;
        "value": string;
    }
    interface GuxOptionLegacy {
        /**
          * If this Boolean attribute is set, this option is not checkable. It won't receive any browsing events, like mouse clicks or focus-related ones.
         */
        "disabled": boolean;
        "selected": boolean;
        /**
          * Determines if the search input matches this option.
          * @param searchInput The input string being searched for.
         */
        "shouldFilter": (searchInput: string) => Promise<boolean>;
        /**
          * The content of this attribute represents the value to be displayed, If this attribute is omitted, the value is taken from the text content of the slot. This attribute takes precedence over slot value
         */
        "text": string;
        /**
          * The content of this attribute represents the value to be submitted on 'input' changes, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value": string;
    }
    interface GuxOptionMulti {
        "active": boolean;
        "custom": boolean;
        "disabled": boolean;
        "filtered": boolean;
        "hovered": boolean;
        "selected": boolean;
        "value": string;
    }
    interface GuxPageLoadingSpinner {
        /**
          * Localized text to provide an accessible label for the component. If no screenreader text is provided, the localized string "Loading" will be used by default
         */
        "screenreaderText": string;
    }
    interface GuxPagination {
        /**
          * The currently select page. Changes are watched by the component.
         */
        "currentPage": number;
        /**
          * The max number of items on a page. Used to calculate total page count
         */
        "itemsPerPage": GuxItemsPerPage;
        /**
          * The pagination component can have different layouts to suit the available space
         */
        "layout": GuxPaginationLayout;
        /**
          * The total number of items in the data set. Used to calculate total page count
         */
        "totalItems": number;
    }
    interface GuxPaginationBeta {
        /**
          * The currently select page. Changes are watched by the component.
         */
        "currentPage": number;
        /**
          * The max number of items on a page. Used to calculate total page count
         */
        "itemsPerPage": GuxItemsPerPage;
        /**
          * The pagination component can have different layouts to suit the available space
         */
        "layout": GuxPaginationLayoutBeta;
        /**
          * The total number of items in the data set. Used to calculate total page count
         */
        "totalItems": number;
    }
    interface GuxPaginationButtons {
        "currentPage": number;
        "layout": GuxPaginationLayout;
        "totalPages": number;
    }
    interface GuxPaginationButtonsBeta {
        "currentPage": number;
        "layout": GuxPaginationLayoutBeta;
        "totalPages": number;
    }
    interface GuxPaginationCursor {
        "hasNext": boolean;
        "hasPrevious": boolean;
    }
    interface GuxPaginationItemCounts {
        "currentPage": number;
        "itemsPerPage": number;
        "totalItems": number;
    }
    interface GuxPaginationItemCountsBeta {
        "currentPage": number;
        "itemsPerPage": number;
        "totalItems": number;
    }
    interface GuxPaginationItemsPerPage {
        "itemsPerPage": GuxItemsPerPage;
    }
    interface GuxPaginationItemsPerPageBeta {
        "itemsPerPage": GuxItemsPerPage1;
    }
    interface GuxPanelFrameLegacy {
    }
    interface GuxPhoneInputBeta {
        "defaultRegion": string;
        "disabled": boolean;
        "hasError": boolean;
        "labelId": string;
        "required": boolean;
        "value": string;
    }
    interface GuxPopover {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside": boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton": boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for": string;
        /**
          * Indicate position of popover element arrow (follow popper js position attribute api)
         */
        "position": PopperPosition;
    }
    interface GuxPopoverBeta {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside": boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton": boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for": string;
        "isOpen": boolean;
        /**
          * Indicate position of popover element arrow (follow floating ui placement attribute api)
         */
        "position": Placement;
    }
    interface GuxPopoverList {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside": boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton": boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for": string;
        /**
          * Indicate position of popover element arrow (follow popper js position attribute api)
         */
        "position": PopperPosition1;
    }
    interface GuxPopoverListBeta {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside": boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton": boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for": string;
        "isOpen": boolean;
        /**
          * Indicate position of popover element arrow (follow floating ui placement attribute api)
         */
        "position": Placement;
    }
    interface GuxPopup {
        "disabled": boolean;
        "expanded": boolean;
    }
    interface GuxPopupBeta {
        "disabled": boolean;
        "expanded": boolean;
    }
    interface GuxRadialLoading {
        /**
          * The display context the component is in.
         */
        "context": GuxRadialLoadingContext;
        /**
          * Localized text to provide an accessible label for the component. If no screenreader text is provided, the localized string "Loading" will be used by default.
         */
        "screenreaderText": string;
    }
    interface GuxRadialProgress {
        /**
          * The max value of the progress spinner
         */
        "max": number;
        /**
          * The max number of decimal places that will be displayed
         */
        "scale": GuxRadialProgressScale;
        /**
          * Required localized text to provide an accessible label for the component
         */
        "screenreaderText": string;
        /**
          * The progress made in the progress spinner compared to the max value
         */
        "value": number;
    }
    interface GuxRating {
        "disabled": boolean;
        "maxValue": number;
        "readonly": boolean;
        "value": number;
    }
    interface GuxRegionIcon {
        "region": string;
    }
    interface GuxRowSelect {
        "disabled": boolean;
        "selected": boolean;
    }
    interface GuxScreenReaderBeta {
    }
    interface GuxSidePanelButton {
        "altText": string;
        "icon": string;
        "isSelected": boolean;
    }
    interface GuxSidePanelLegacy {
        /**
          * Open or close the content
         */
        "isOpen": boolean;
        /**
          * The position of the side panel
         */
        "position": 'left' | 'right';
    }
    interface GuxSimpleToast {
        /**
          * The component accent.
         */
        "accent": GuxSimpleToastAccent;
    }
    interface GuxSkipNavigationItem {
    }
    interface GuxSkipNavigationListBeta {
    }
    interface GuxSortControl {
        "includeUnsorted": boolean;
    }
    interface GuxSubmenu {
        /**
          * Focus on the components button element
         */
        "guxFocus": () => Promise<void>;
        "label": string;
    }
    interface GuxSwitch {
        "layout": GuxSwitchAllowedLayouts;
        "value": string;
    }
    interface GuxSwitchItem {
        "disabled": boolean;
        "selected": boolean;
        "value": string;
    }
    interface GuxTab {
        /**
          * Specifies if tab is disabled
         */
        "guxDisabled": boolean;
        "guxFocus": () => Promise<void>;
        "guxGetActive": () => Promise<boolean>;
        "guxSetActive": (active: boolean) => Promise<void>;
        /**
          * Tab id for the tab
         */
        "tabId": string;
    }
    interface GuxTabAdvanced {
        "guxDisabled": boolean;
        "guxFocus": () => Promise<void>;
        "guxGetActive": () => Promise<boolean>;
        "guxSetActive": (active: boolean) => Promise<void>;
        /**
          * unique id for the tab
         */
        "tabId": string;
    }
    interface GuxTabAdvancedList {
        /**
          * Enable tab sorting by drag/drop
         */
        "allowSort": boolean;
        "guxSetActive": (activeTab: string) => Promise<void>;
        /**
          * Enable new tab button
         */
        "showNewTabButton": boolean;
        /**
          * Maximum nuber of tabs created
         */
        "tabLimit": number;
    }
    interface GuxTabAdvancedPanel {
        "guxSetActive": (active: boolean) => Promise<void>;
        "tabId": string;
    }
    interface GuxTabDropdownOptionLegacy {
        /**
          * name of the gux-icon to display for the option
         */
        "iconName": string;
        /**
          * unique id for the option
         */
        "optionId": string;
    }
    interface GuxTabLegacy {
        /**
          * indicates whether or not the tab is selected
         */
        "active": boolean;
        /**
          * indicates the gux-icon to display on the left side of the tab (similar to a favicon in the browser)
         */
        "tabIconName": string;
        /**
          * unique id for the tab
         */
        "tabId": string;
    }
    interface GuxTabList {
        "guxSetActive": (activeTab: string) => Promise<void>;
    }
    interface GuxTabPanel {
        "guxSetActive": (active: boolean) => Promise<void>;
        /**
          * Tab id of the tab that is associated with the panel
         */
        "tabId": string;
    }
    interface GuxTabPanelBeta {
        "guxSetActive": (active: boolean) => Promise<void>;
        /**
          * Tab id of the tab that is associated with the panel
         */
        "tabId": string;
    }
    interface GuxTableBeta {
        /**
          * Indicates table row density style
         */
        "compact": boolean;
        /**
          * Represents info message that should be displayed for empty table
         */
        "emptyMessage": string;
        /**
          * Returns the selected rows Ids.
         */
        "getSelected": () => Promise<GuxTableSelectedState>;
        /**
          * Indicates that object table specific styles should be applied
         */
        "objectTable": boolean;
        /**
          * Indicates that table should have resizable columns
         */
        "resizableColumns": boolean;
    }
    interface GuxTableSelectMenu {
        "dropdownDisabled": boolean;
    }
    interface GuxTableSelectPopover {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside": boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for": string;
    }
    interface GuxTableToolbarAction {
        "accent": GuxTableToolbarActionAccent;
        "action": GuxTableToolbarActionTypes;
        "disabled": boolean;
        "iconOnly": boolean;
    }
    interface GuxTableToolbarBeta {
    }
    interface GuxTableToolbarCustomAction {
        "accent": GuxTableToolbarActionAccent;
        "disabled": boolean;
        "iconOnly": boolean;
    }
    interface GuxTableToolbarMenuButton {
        "showMenu": boolean;
    }
    interface GuxTabs {
        /**
          * tabId of the currently selected tab
         */
        "activeTab": string;
        /**
          * Specifies left aligned, centered, or full width tabs
         */
        "alignment": GuxTabsAlignment;
        "guxActivate": (tabId: string) => Promise<void>;
        /**
          * Specifies horizontal or vertical orientation of tabs
         */
        "orientation": GuxTabsOrientation;
    }
    interface GuxTabsAdvanced {
        /**
          * tabId of the currently selected tab
         */
        "activeTab": string;
        "guxActivate": (tabId: string) => Promise<void>;
    }
    interface GuxTabsLegacy {
        /**
          * Enable tab sorting by drag/drop
         */
        "allowSort": boolean;
        /**
          * Enable new tab button
         */
        "showNewTabButton": boolean;
        /**
          * Maximum nuber of tabs created
         */
        "tabLimit": number;
        /**
          * tabId of the currently selected tab
         */
        "value": string;
    }
    interface GuxTagBeta {
        /**
          * Tag background color.
         */
        "color": GuxTagColor;
        /**
          * Tag is removable.
         */
        "disabled": boolean;
        /**
          * Tag is removable.
         */
        "removable": boolean;
        /**
          * Index for remove tag
         */
        "value": string;
    }
    interface GuxTextHighlight {
        /**
          * The text to highlight.
         */
        "highlight": string;
        /**
          * The way the text should be highlighted.
         */
        "strategy": GuxTextHighlightStrategy;
        /**
          * The value to display.
         */
        "text": string;
    }
    interface GuxTextLabelLegacy {
        /**
          * The string of text to use for the label.  If the 'label' slot is provided, that dom will be used instead of this property.
         */
        "label": string;
        /**
          * The position of the label relative to its contained element.
         */
        "position": 'above' | 'beside';
    }
    interface GuxTimeBeta {
        /**
          * The ISO string representation of the time to format
         */
        "datetime": string;
        /**
          * Format option type
         */
        "format": GuxDateTimeFormat;
    }
    interface GuxTimePickerBeta {
        "clockType": GuxClockType;
        "disabled": boolean;
        "hasError": boolean;
        "interval": GuxMinuteInterval;
        "required": boolean;
        "step": GuxMinuteStep;
        "value": GuxISOHourMinute;
    }
    interface GuxToggle {
        "checked": boolean;
        "checkedLabel": string;
        "disabled": boolean;
        "displayInline": boolean;
        "errorMessage": string;
        "labelPosition": GuxToggleLabelPosition;
        "loading": boolean;
        "uncheckedLabel": string;
    }
    interface GuxToggleSlider {
        "checked": boolean;
        "disabled": boolean;
        "errorId": string;
        "guxAriaLabel": string;
        "labelId": string;
    }
    interface GuxTooltip {
        /**
          * Indicates the id of the element the popover should anchor to. (If not supplied the parent element is used)
         */
        "for": string;
        "hideTooltip": () => Promise<void>;
        /**
          * Placement of the tooltip. Default is bottom-start
         */
        "placement": Placement;
        "showTooltip": () => Promise<void>;
    }
    interface GuxTooltipTitle {
        "setHideTooltip": () => Promise<void>;
        "setShowTooltip": () => Promise<void>;
    }
    interface GuxTruncateBeta {
        /**
          * Lines to wrap before truncating
         */
        "maxLines": number;
        "setHideTooltip": () => Promise<void>;
        "setShowTooltip": () => Promise<void>;
    }
    interface GuxVisualizationBeta {
        "embedOptions": EmbedOptions;
        "visualizationSpec": VisualizationSpec;
    }
}
export interface GuxAccordionSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxAccordionSectionElement;
}
export interface GuxActionButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxActionButtonElement;
}
export interface GuxActionButtonLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxActionButtonLegacyElement;
}
export interface GuxActionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxActionItemElement;
}
export interface GuxAdvancedDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxAdvancedDropdownElement;
}
export interface GuxAllRowSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxAllRowSelectElement;
}
export interface GuxButtonMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxButtonMultiElement;
}
export interface GuxButtonMultiLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxButtonMultiLegacyElement;
}
export interface GuxCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxCalendarElement;
}
export interface GuxColumnManagerBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxColumnManagerBetaElement;
}
export interface GuxColumnManagerItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxColumnManagerItemElement;
}
export interface GuxCommandActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxCommandActionElement;
}
export interface GuxContentSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxContentSearchElement;
}
export interface GuxCreateOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxCreateOptionElement;
}
export interface GuxDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDatepickerElement;
}
export interface GuxDisclosureButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDisclosureButtonElement;
}
export interface GuxDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDropdownElement;
}
export interface GuxDropdownLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDropdownLegacyElement;
}
export interface GuxDropdownMultiBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDropdownMultiBetaElement;
}
export interface GuxDropdownMultiTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDropdownMultiTagElement;
}
export interface GuxDropdownOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxDropdownOptionElement;
}
export interface GuxFormFieldPhoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxFormFieldPhoneElement;
}
export interface GuxInputColorOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxInputColorOptionElement;
}
export interface GuxListItemLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxListItemLegacyElement;
}
export interface GuxListLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxListLegacyElement;
}
export interface GuxListboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxListboxElement;
}
export interface GuxListboxMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxListboxMultiElement;
}
export interface GuxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxModalElement;
}
export interface GuxNotificationToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxNotificationToastElement;
}
export interface GuxOptionMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxOptionMultiElement;
}
export interface GuxPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationElement;
}
export interface GuxPaginationBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationBetaElement;
}
export interface GuxPaginationButtonsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationButtonsElement;
}
export interface GuxPaginationButtonsBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationButtonsBetaElement;
}
export interface GuxPaginationCursorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationCursorElement;
}
export interface GuxPaginationItemsPerPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationItemsPerPageElement;
}
export interface GuxPaginationItemsPerPageBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPaginationItemsPerPageBetaElement;
}
export interface GuxPhoneInputBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPhoneInputBetaElement;
}
export interface GuxPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopoverElement;
}
export interface GuxPopoverBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopoverBetaElement;
}
export interface GuxPopoverListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopoverListElement;
}
export interface GuxPopoverListBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopoverListBetaElement;
}
export interface GuxPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopupElement;
}
export interface GuxPopupBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxPopupBetaElement;
}
export interface GuxRowSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxRowSelectElement;
}
export interface GuxSimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxSimpleToastElement;
}
export interface GuxSortControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxSortControlElement;
}
export interface GuxTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabElement;
}
export interface GuxTabAdvancedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabAdvancedElement;
}
export interface GuxTabAdvancedListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabAdvancedListElement;
}
export interface GuxTabAdvancedPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabAdvancedPanelElement;
}
export interface GuxTabLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabLegacyElement;
}
export interface GuxTabPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabPanelElement;
}
export interface GuxTabPanelBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabPanelBetaElement;
}
export interface GuxTableBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTableBetaElement;
}
export interface GuxTableSelectPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTableSelectPopoverElement;
}
export interface GuxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabsElement;
}
export interface GuxTabsAdvancedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabsAdvancedElement;
}
export interface GuxTabsLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTabsLegacyElement;
}
export interface GuxTagBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxTagBetaElement;
}
export interface GuxToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxToggleElement;
}
export interface GuxVisualizationBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGuxVisualizationBetaElement;
}
declare global {
    interface HTMLGuxAccordionElement extends Components.GuxAccordion, HTMLStencilElement {
    }
    var HTMLGuxAccordionElement: {
        prototype: HTMLGuxAccordionElement;
        new (): HTMLGuxAccordionElement;
    };
    interface HTMLGuxAccordionLegacyElement extends Components.GuxAccordionLegacy, HTMLStencilElement {
    }
    var HTMLGuxAccordionLegacyElement: {
        prototype: HTMLGuxAccordionLegacyElement;
        new (): HTMLGuxAccordionLegacyElement;
    };
    interface HTMLGuxAccordionSectionElement extends Components.GuxAccordionSection, HTMLStencilElement {
    }
    var HTMLGuxAccordionSectionElement: {
        prototype: HTMLGuxAccordionSectionElement;
        new (): HTMLGuxAccordionSectionElement;
    };
    interface HTMLGuxActionButtonElement extends Components.GuxActionButton, HTMLStencilElement {
    }
    var HTMLGuxActionButtonElement: {
        prototype: HTMLGuxActionButtonElement;
        new (): HTMLGuxActionButtonElement;
    };
    interface HTMLGuxActionButtonLegacyElement extends Components.GuxActionButtonLegacy, HTMLStencilElement {
    }
    var HTMLGuxActionButtonLegacyElement: {
        prototype: HTMLGuxActionButtonLegacyElement;
        new (): HTMLGuxActionButtonLegacyElement;
    };
    interface HTMLGuxActionItemElement extends Components.GuxActionItem, HTMLStencilElement {
    }
    var HTMLGuxActionItemElement: {
        prototype: HTMLGuxActionItemElement;
        new (): HTMLGuxActionItemElement;
    };
    interface HTMLGuxActionListDividerElement extends Components.GuxActionListDivider, HTMLStencilElement {
    }
    var HTMLGuxActionListDividerElement: {
        prototype: HTMLGuxActionListDividerElement;
        new (): HTMLGuxActionListDividerElement;
    };
    interface HTMLGuxActionListLegacyElement extends Components.GuxActionListLegacy, HTMLStencilElement {
    }
    var HTMLGuxActionListLegacyElement: {
        prototype: HTMLGuxActionListLegacyElement;
        new (): HTMLGuxActionListLegacyElement;
    };
    interface HTMLGuxActionToastElement extends Components.GuxActionToast, HTMLStencilElement {
    }
    var HTMLGuxActionToastElement: {
        prototype: HTMLGuxActionToastElement;
        new (): HTMLGuxActionToastElement;
    };
    interface HTMLGuxAdvancedDropdownElement extends Components.GuxAdvancedDropdown, HTMLStencilElement {
    }
    var HTMLGuxAdvancedDropdownElement: {
        prototype: HTMLGuxAdvancedDropdownElement;
        new (): HTMLGuxAdvancedDropdownElement;
    };
    interface HTMLGuxAllRowSelectElement extends Components.GuxAllRowSelect, HTMLStencilElement {
    }
    var HTMLGuxAllRowSelectElement: {
        prototype: HTMLGuxAllRowSelectElement;
        new (): HTMLGuxAllRowSelectElement;
    };
    interface HTMLGuxAnnounceBetaElement extends Components.GuxAnnounceBeta, HTMLStencilElement {
    }
    var HTMLGuxAnnounceBetaElement: {
        prototype: HTMLGuxAnnounceBetaElement;
        new (): HTMLGuxAnnounceBetaElement;
    };
    interface HTMLGuxBadgeBetaElement extends Components.GuxBadgeBeta, HTMLStencilElement {
    }
    var HTMLGuxBadgeBetaElement: {
        prototype: HTMLGuxBadgeBetaElement;
        new (): HTMLGuxBadgeBetaElement;
    };
    interface HTMLGuxBlankStateBetaElement extends Components.GuxBlankStateBeta, HTMLStencilElement {
    }
    var HTMLGuxBlankStateBetaElement: {
        prototype: HTMLGuxBlankStateBetaElement;
        new (): HTMLGuxBlankStateBetaElement;
    };
    interface HTMLGuxBreadcrumbItemElement extends Components.GuxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLGuxBreadcrumbItemElement: {
        prototype: HTMLGuxBreadcrumbItemElement;
        new (): HTMLGuxBreadcrumbItemElement;
    };
    interface HTMLGuxBreadcrumbsElement extends Components.GuxBreadcrumbs, HTMLStencilElement {
    }
    var HTMLGuxBreadcrumbsElement: {
        prototype: HTMLGuxBreadcrumbsElement;
        new (): HTMLGuxBreadcrumbsElement;
    };
    interface HTMLGuxButtonElement extends Components.GuxButton, HTMLStencilElement {
    }
    var HTMLGuxButtonElement: {
        prototype: HTMLGuxButtonElement;
        new (): HTMLGuxButtonElement;
    };
    interface HTMLGuxButtonMultiElement extends Components.GuxButtonMulti, HTMLStencilElement {
    }
    var HTMLGuxButtonMultiElement: {
        prototype: HTMLGuxButtonMultiElement;
        new (): HTMLGuxButtonMultiElement;
    };
    interface HTMLGuxButtonMultiLegacyElement extends Components.GuxButtonMultiLegacy, HTMLStencilElement {
    }
    var HTMLGuxButtonMultiLegacyElement: {
        prototype: HTMLGuxButtonMultiLegacyElement;
        new (): HTMLGuxButtonMultiLegacyElement;
    };
    interface HTMLGuxButtonSlotBetaElement extends Components.GuxButtonSlotBeta, HTMLStencilElement {
    }
    var HTMLGuxButtonSlotBetaElement: {
        prototype: HTMLGuxButtonSlotBetaElement;
        new (): HTMLGuxButtonSlotBetaElement;
    };
    interface HTMLGuxCalendarElement extends Components.GuxCalendar, HTMLStencilElement {
    }
    var HTMLGuxCalendarElement: {
        prototype: HTMLGuxCalendarElement;
        new (): HTMLGuxCalendarElement;
    };
    interface HTMLGuxCardBetaElement extends Components.GuxCardBeta, HTMLStencilElement {
    }
    var HTMLGuxCardBetaElement: {
        prototype: HTMLGuxCardBetaElement;
        new (): HTMLGuxCardBetaElement;
    };
    interface HTMLGuxChartColumnBetaElement extends Components.GuxChartColumnBeta, HTMLStencilElement {
    }
    var HTMLGuxChartColumnBetaElement: {
        prototype: HTMLGuxChartColumnBetaElement;
        new (): HTMLGuxChartColumnBetaElement;
    };
    interface HTMLGuxChartDonutBetaElement extends Components.GuxChartDonutBeta, HTMLStencilElement {
    }
    var HTMLGuxChartDonutBetaElement: {
        prototype: HTMLGuxChartDonutBetaElement;
        new (): HTMLGuxChartDonutBetaElement;
    };
    interface HTMLGuxChartLineBetaElement extends Components.GuxChartLineBeta, HTMLStencilElement {
    }
    var HTMLGuxChartLineBetaElement: {
        prototype: HTMLGuxChartLineBetaElement;
        new (): HTMLGuxChartLineBetaElement;
    };
    interface HTMLGuxChartPieBetaElement extends Components.GuxChartPieBeta, HTMLStencilElement {
    }
    var HTMLGuxChartPieBetaElement: {
        prototype: HTMLGuxChartPieBetaElement;
        new (): HTMLGuxChartPieBetaElement;
    };
    interface HTMLGuxChartScatterPlotBetaElement extends Components.GuxChartScatterPlotBeta, HTMLStencilElement {
    }
    var HTMLGuxChartScatterPlotBetaElement: {
        prototype: HTMLGuxChartScatterPlotBetaElement;
        new (): HTMLGuxChartScatterPlotBetaElement;
    };
    interface HTMLGuxColorSelectElement extends Components.GuxColorSelect, HTMLStencilElement {
    }
    var HTMLGuxColorSelectElement: {
        prototype: HTMLGuxColorSelectElement;
        new (): HTMLGuxColorSelectElement;
    };
    interface HTMLGuxColumnManagerBetaElement extends Components.GuxColumnManagerBeta, HTMLStencilElement {
    }
    var HTMLGuxColumnManagerBetaElement: {
        prototype: HTMLGuxColumnManagerBetaElement;
        new (): HTMLGuxColumnManagerBetaElement;
    };
    interface HTMLGuxColumnManagerItemElement extends Components.GuxColumnManagerItem, HTMLStencilElement {
    }
    var HTMLGuxColumnManagerItemElement: {
        prototype: HTMLGuxColumnManagerItemElement;
        new (): HTMLGuxColumnManagerItemElement;
    };
    interface HTMLGuxCommandActionElement extends Components.GuxCommandAction, HTMLStencilElement {
    }
    var HTMLGuxCommandActionElement: {
        prototype: HTMLGuxCommandActionElement;
        new (): HTMLGuxCommandActionElement;
    };
    interface HTMLGuxCommandPaletteLegacyElement extends Components.GuxCommandPaletteLegacy, HTMLStencilElement {
    }
    var HTMLGuxCommandPaletteLegacyElement: {
        prototype: HTMLGuxCommandPaletteLegacyElement;
        new (): HTMLGuxCommandPaletteLegacyElement;
    };
    interface HTMLGuxContentSearchElement extends Components.GuxContentSearch, HTMLStencilElement {
    }
    var HTMLGuxContentSearchElement: {
        prototype: HTMLGuxContentSearchElement;
        new (): HTMLGuxContentSearchElement;
    };
    interface HTMLGuxContextMenuBetaElement extends Components.GuxContextMenuBeta, HTMLStencilElement {
    }
    var HTMLGuxContextMenuBetaElement: {
        prototype: HTMLGuxContextMenuBetaElement;
        new (): HTMLGuxContextMenuBetaElement;
    };
    interface HTMLGuxCopyToClipboardBetaElement extends Components.GuxCopyToClipboardBeta, HTMLStencilElement {
    }
    var HTMLGuxCopyToClipboardBetaElement: {
        prototype: HTMLGuxCopyToClipboardBetaElement;
        new (): HTMLGuxCopyToClipboardBetaElement;
    };
    interface HTMLGuxCreateOptionElement extends Components.GuxCreateOption, HTMLStencilElement {
    }
    var HTMLGuxCreateOptionElement: {
        prototype: HTMLGuxCreateOptionElement;
        new (): HTMLGuxCreateOptionElement;
    };
    interface HTMLGuxDateBetaElement extends Components.GuxDateBeta, HTMLStencilElement {
    }
    var HTMLGuxDateBetaElement: {
        prototype: HTMLGuxDateBetaElement;
        new (): HTMLGuxDateBetaElement;
    };
    interface HTMLGuxDateTimeBetaElement extends Components.GuxDateTimeBeta, HTMLStencilElement {
    }
    var HTMLGuxDateTimeBetaElement: {
        prototype: HTMLGuxDateTimeBetaElement;
        new (): HTMLGuxDateTimeBetaElement;
    };
    interface HTMLGuxDatepickerElement extends Components.GuxDatepicker, HTMLStencilElement {
    }
    var HTMLGuxDatepickerElement: {
        prototype: HTMLGuxDatepickerElement;
        new (): HTMLGuxDatepickerElement;
    };
    interface HTMLGuxDisclosureButtonElement extends Components.GuxDisclosureButton, HTMLStencilElement {
    }
    var HTMLGuxDisclosureButtonElement: {
        prototype: HTMLGuxDisclosureButtonElement;
        new (): HTMLGuxDisclosureButtonElement;
    };
    interface HTMLGuxDismissButtonElement extends Components.GuxDismissButton, HTMLStencilElement {
    }
    var HTMLGuxDismissButtonElement: {
        prototype: HTMLGuxDismissButtonElement;
        new (): HTMLGuxDismissButtonElement;
    };
    /**
     * Our Dropdown component. In the most basic case, it's used with `gux-option` to give users
     * a list of text options to select from, but other types of options with different appearance
     * can be created by creating a new component and adding it to `validOptionTags` list in
     * gux-dropdown-types.ts, then following the resulting compiler errors.
     */
    interface HTMLGuxDropdownElement extends Components.GuxDropdown, HTMLStencilElement {
    }
    var HTMLGuxDropdownElement: {
        prototype: HTMLGuxDropdownElement;
        new (): HTMLGuxDropdownElement;
    };
    interface HTMLGuxDropdownLegacyElement extends Components.GuxDropdownLegacy, HTMLStencilElement {
    }
    var HTMLGuxDropdownLegacyElement: {
        prototype: HTMLGuxDropdownLegacyElement;
        new (): HTMLGuxDropdownLegacyElement;
    };
    interface HTMLGuxDropdownMultiBetaElement extends Components.GuxDropdownMultiBeta, HTMLStencilElement {
    }
    var HTMLGuxDropdownMultiBetaElement: {
        prototype: HTMLGuxDropdownMultiBetaElement;
        new (): HTMLGuxDropdownMultiBetaElement;
    };
    interface HTMLGuxDropdownMultiTagElement extends Components.GuxDropdownMultiTag, HTMLStencilElement {
    }
    var HTMLGuxDropdownMultiTagElement: {
        prototype: HTMLGuxDropdownMultiTagElement;
        new (): HTMLGuxDropdownMultiTagElement;
    };
    interface HTMLGuxDropdownOptionElement extends Components.GuxDropdownOption, HTMLStencilElement {
    }
    var HTMLGuxDropdownOptionElement: {
        prototype: HTMLGuxDropdownOptionElement;
        new (): HTMLGuxDropdownOptionElement;
    };
    interface HTMLGuxErrorMessageBetaElement extends Components.GuxErrorMessageBeta, HTMLStencilElement {
    }
    var HTMLGuxErrorMessageBetaElement: {
        prototype: HTMLGuxErrorMessageBetaElement;
        new (): HTMLGuxErrorMessageBetaElement;
    };
    interface HTMLGuxFlyoutMenuBetaElement extends Components.GuxFlyoutMenuBeta, HTMLStencilElement {
    }
    var HTMLGuxFlyoutMenuBetaElement: {
        prototype: HTMLGuxFlyoutMenuBetaElement;
        new (): HTMLGuxFlyoutMenuBetaElement;
    };
    interface HTMLGuxFormFieldCheckboxElement extends Components.GuxFormFieldCheckbox, HTMLStencilElement {
    }
    var HTMLGuxFormFieldCheckboxElement: {
        prototype: HTMLGuxFormFieldCheckboxElement;
        new (): HTMLGuxFormFieldCheckboxElement;
    };
    interface HTMLGuxFormFieldColorElement extends Components.GuxFormFieldColor, HTMLStencilElement {
    }
    var HTMLGuxFormFieldColorElement: {
        prototype: HTMLGuxFormFieldColorElement;
        new (): HTMLGuxFormFieldColorElement;
    };
    interface HTMLGuxFormFieldDropdownElement extends Components.GuxFormFieldDropdown, HTMLStencilElement {
    }
    var HTMLGuxFormFieldDropdownElement: {
        prototype: HTMLGuxFormFieldDropdownElement;
        new (): HTMLGuxFormFieldDropdownElement;
    };
    interface HTMLGuxFormFieldInputClearButtonElement extends Components.GuxFormFieldInputClearButton, HTMLStencilElement {
    }
    var HTMLGuxFormFieldInputClearButtonElement: {
        prototype: HTMLGuxFormFieldInputClearButtonElement;
        new (): HTMLGuxFormFieldInputClearButtonElement;
    };
    interface HTMLGuxFormFieldLegacyElement extends Components.GuxFormFieldLegacy, HTMLStencilElement {
    }
    var HTMLGuxFormFieldLegacyElement: {
        prototype: HTMLGuxFormFieldLegacyElement;
        new (): HTMLGuxFormFieldLegacyElement;
    };
    interface HTMLGuxFormFieldNumberElement extends Components.GuxFormFieldNumber, HTMLStencilElement {
    }
    var HTMLGuxFormFieldNumberElement: {
        prototype: HTMLGuxFormFieldNumberElement;
        new (): HTMLGuxFormFieldNumberElement;
    };
    interface HTMLGuxFormFieldPhoneElement extends Components.GuxFormFieldPhone, HTMLStencilElement {
    }
    var HTMLGuxFormFieldPhoneElement: {
        prototype: HTMLGuxFormFieldPhoneElement;
        new (): HTMLGuxFormFieldPhoneElement;
    };
    interface HTMLGuxFormFieldRadioElement extends Components.GuxFormFieldRadio, HTMLStencilElement {
    }
    var HTMLGuxFormFieldRadioElement: {
        prototype: HTMLGuxFormFieldRadioElement;
        new (): HTMLGuxFormFieldRadioElement;
    };
    interface HTMLGuxFormFieldRangeElement extends Components.GuxFormFieldRange, HTMLStencilElement {
    }
    var HTMLGuxFormFieldRangeElement: {
        prototype: HTMLGuxFormFieldRangeElement;
        new (): HTMLGuxFormFieldRangeElement;
    };
    interface HTMLGuxFormFieldSearchElement extends Components.GuxFormFieldSearch, HTMLStencilElement {
    }
    var HTMLGuxFormFieldSearchElement: {
        prototype: HTMLGuxFormFieldSearchElement;
        new (): HTMLGuxFormFieldSearchElement;
    };
    interface HTMLGuxFormFieldSelectElement extends Components.GuxFormFieldSelect, HTMLStencilElement {
    }
    var HTMLGuxFormFieldSelectElement: {
        prototype: HTMLGuxFormFieldSelectElement;
        new (): HTMLGuxFormFieldSelectElement;
    };
    interface HTMLGuxFormFieldTextLikeElement extends Components.GuxFormFieldTextLike, HTMLStencilElement {
    }
    var HTMLGuxFormFieldTextLikeElement: {
        prototype: HTMLGuxFormFieldTextLikeElement;
        new (): HTMLGuxFormFieldTextLikeElement;
    };
    interface HTMLGuxFormFieldTextareaElement extends Components.GuxFormFieldTextarea, HTMLStencilElement {
    }
    var HTMLGuxFormFieldTextareaElement: {
        prototype: HTMLGuxFormFieldTextareaElement;
        new (): HTMLGuxFormFieldTextareaElement;
    };
    interface HTMLGuxFormFieldTimePickerElement extends Components.GuxFormFieldTimePicker, HTMLStencilElement {
    }
    var HTMLGuxFormFieldTimePickerElement: {
        prototype: HTMLGuxFormFieldTimePickerElement;
        new (): HTMLGuxFormFieldTimePickerElement;
    };
    interface HTMLGuxIconElement extends Components.GuxIcon, HTMLStencilElement {
    }
    var HTMLGuxIconElement: {
        prototype: HTMLGuxIconElement;
        new (): HTMLGuxIconElement;
    };
    interface HTMLGuxInlineAlertBetaElement extends Components.GuxInlineAlertBeta, HTMLStencilElement {
    }
    var HTMLGuxInlineAlertBetaElement: {
        prototype: HTMLGuxInlineAlertBetaElement;
        new (): HTMLGuxInlineAlertBetaElement;
    };
    interface HTMLGuxInputCheckboxElement extends Components.GuxInputCheckbox, HTMLStencilElement {
    }
    var HTMLGuxInputCheckboxElement: {
        prototype: HTMLGuxInputCheckboxElement;
        new (): HTMLGuxInputCheckboxElement;
    };
    interface HTMLGuxInputColorElement extends Components.GuxInputColor, HTMLStencilElement {
    }
    var HTMLGuxInputColorElement: {
        prototype: HTMLGuxInputColorElement;
        new (): HTMLGuxInputColorElement;
    };
    interface HTMLGuxInputColorOptionElement extends Components.GuxInputColorOption, HTMLStencilElement {
    }
    var HTMLGuxInputColorOptionElement: {
        prototype: HTMLGuxInputColorOptionElement;
        new (): HTMLGuxInputColorOptionElement;
    };
    interface HTMLGuxInputNumberElement extends Components.GuxInputNumber, HTMLStencilElement {
    }
    var HTMLGuxInputNumberElement: {
        prototype: HTMLGuxInputNumberElement;
        new (): HTMLGuxInputNumberElement;
    };
    interface HTMLGuxInputRadioElement extends Components.GuxInputRadio, HTMLStencilElement {
    }
    var HTMLGuxInputRadioElement: {
        prototype: HTMLGuxInputRadioElement;
        new (): HTMLGuxInputRadioElement;
    };
    interface HTMLGuxInputRangeElement extends Components.GuxInputRange, HTMLStencilElement {
    }
    var HTMLGuxInputRangeElement: {
        prototype: HTMLGuxInputRangeElement;
        new (): HTMLGuxInputRangeElement;
    };
    interface HTMLGuxInputSearchElement extends Components.GuxInputSearch, HTMLStencilElement {
    }
    var HTMLGuxInputSearchElement: {
        prototype: HTMLGuxInputSearchElement;
        new (): HTMLGuxInputSearchElement;
    };
    interface HTMLGuxInputSelectElement extends Components.GuxInputSelect, HTMLStencilElement {
    }
    var HTMLGuxInputSelectElement: {
        prototype: HTMLGuxInputSelectElement;
        new (): HTMLGuxInputSelectElement;
    };
    interface HTMLGuxInputTextLikeElement extends Components.GuxInputTextLike, HTMLStencilElement {
    }
    var HTMLGuxInputTextLikeElement: {
        prototype: HTMLGuxInputTextLikeElement;
        new (): HTMLGuxInputTextLikeElement;
    };
    interface HTMLGuxInputTextareaElement extends Components.GuxInputTextarea, HTMLStencilElement {
    }
    var HTMLGuxInputTextareaElement: {
        prototype: HTMLGuxInputTextareaElement;
        new (): HTMLGuxInputTextareaElement;
    };
    interface HTMLGuxListElement extends Components.GuxList, HTMLStencilElement {
    }
    var HTMLGuxListElement: {
        prototype: HTMLGuxListElement;
        new (): HTMLGuxListElement;
    };
    interface HTMLGuxListDividerElement extends Components.GuxListDivider, HTMLStencilElement {
    }
    var HTMLGuxListDividerElement: {
        prototype: HTMLGuxListDividerElement;
        new (): HTMLGuxListDividerElement;
    };
    interface HTMLGuxListDividerLegacyElement extends Components.GuxListDividerLegacy, HTMLStencilElement {
    }
    var HTMLGuxListDividerLegacyElement: {
        prototype: HTMLGuxListDividerLegacyElement;
        new (): HTMLGuxListDividerLegacyElement;
    };
    interface HTMLGuxListItemElement extends Components.GuxListItem, HTMLStencilElement {
    }
    var HTMLGuxListItemElement: {
        prototype: HTMLGuxListItemElement;
        new (): HTMLGuxListItemElement;
    };
    interface HTMLGuxListItemLegacyElement extends Components.GuxListItemLegacy, HTMLStencilElement {
    }
    var HTMLGuxListItemLegacyElement: {
        prototype: HTMLGuxListItemLegacyElement;
        new (): HTMLGuxListItemLegacyElement;
    };
    interface HTMLGuxListLegacyElement extends Components.GuxListLegacy, HTMLStencilElement {
    }
    var HTMLGuxListLegacyElement: {
        prototype: HTMLGuxListLegacyElement;
        new (): HTMLGuxListLegacyElement;
    };
    /**
     * The listbox component provides keyboard bindings and a11y patterns for selecting
     * from a list of options.
     */
    interface HTMLGuxListboxElement extends Components.GuxListbox, HTMLStencilElement {
    }
    var HTMLGuxListboxElement: {
        prototype: HTMLGuxListboxElement;
        new (): HTMLGuxListboxElement;
    };
    interface HTMLGuxListboxMultiElement extends Components.GuxListboxMulti, HTMLStencilElement {
    }
    var HTMLGuxListboxMultiElement: {
        prototype: HTMLGuxListboxMultiElement;
        new (): HTMLGuxListboxMultiElement;
    };
    interface HTMLGuxLoadingMessageBetaElement extends Components.GuxLoadingMessageBeta, HTMLStencilElement {
    }
    var HTMLGuxLoadingMessageBetaElement: {
        prototype: HTMLGuxLoadingMessageBetaElement;
        new (): HTMLGuxLoadingMessageBetaElement;
    };
    interface HTMLGuxMenuElement extends Components.GuxMenu, HTMLStencilElement {
    }
    var HTMLGuxMenuElement: {
        prototype: HTMLGuxMenuElement;
        new (): HTMLGuxMenuElement;
    };
    interface HTMLGuxMenuOptionElement extends Components.GuxMenuOption, HTMLStencilElement {
    }
    var HTMLGuxMenuOptionElement: {
        prototype: HTMLGuxMenuOptionElement;
        new (): HTMLGuxMenuOptionElement;
    };
    interface HTMLGuxModalElement extends Components.GuxModal, HTMLStencilElement {
    }
    var HTMLGuxModalElement: {
        prototype: HTMLGuxModalElement;
        new (): HTMLGuxModalElement;
    };
    interface HTMLGuxMonthCalendarElement extends Components.GuxMonthCalendar, HTMLStencilElement {
    }
    var HTMLGuxMonthCalendarElement: {
        prototype: HTMLGuxMonthCalendarElement;
        new (): HTMLGuxMonthCalendarElement;
    };
    interface HTMLGuxMonthListElement extends Components.GuxMonthList, HTMLStencilElement {
    }
    var HTMLGuxMonthListElement: {
        prototype: HTMLGuxMonthListElement;
        new (): HTMLGuxMonthListElement;
    };
    interface HTMLGuxMonthListItemElement extends Components.GuxMonthListItem, HTMLStencilElement {
    }
    var HTMLGuxMonthListItemElement: {
        prototype: HTMLGuxMonthListItemElement;
        new (): HTMLGuxMonthListItemElement;
    };
    interface HTMLGuxMonthPickerBetaElement extends Components.GuxMonthPickerBeta, HTMLStencilElement {
    }
    var HTMLGuxMonthPickerBetaElement: {
        prototype: HTMLGuxMonthPickerBetaElement;
        new (): HTMLGuxMonthPickerBetaElement;
    };
    interface HTMLGuxNotificationToastElement extends Components.GuxNotificationToast, HTMLStencilElement {
    }
    var HTMLGuxNotificationToastElement: {
        prototype: HTMLGuxNotificationToastElement;
        new (): HTMLGuxNotificationToastElement;
    };
    interface HTMLGuxOptionElement extends Components.GuxOption, HTMLStencilElement {
    }
    var HTMLGuxOptionElement: {
        prototype: HTMLGuxOptionElement;
        new (): HTMLGuxOptionElement;
    };
    interface HTMLGuxOptionIconElement extends Components.GuxOptionIcon, HTMLStencilElement {
    }
    var HTMLGuxOptionIconElement: {
        prototype: HTMLGuxOptionIconElement;
        new (): HTMLGuxOptionIconElement;
    };
    interface HTMLGuxOptionLegacyElement extends Components.GuxOptionLegacy, HTMLStencilElement {
    }
    var HTMLGuxOptionLegacyElement: {
        prototype: HTMLGuxOptionLegacyElement;
        new (): HTMLGuxOptionLegacyElement;
    };
    interface HTMLGuxOptionMultiElement extends Components.GuxOptionMulti, HTMLStencilElement {
    }
    var HTMLGuxOptionMultiElement: {
        prototype: HTMLGuxOptionMultiElement;
        new (): HTMLGuxOptionMultiElement;
    };
    interface HTMLGuxPageLoadingSpinnerElement extends Components.GuxPageLoadingSpinner, HTMLStencilElement {
    }
    var HTMLGuxPageLoadingSpinnerElement: {
        prototype: HTMLGuxPageLoadingSpinnerElement;
        new (): HTMLGuxPageLoadingSpinnerElement;
    };
    interface HTMLGuxPaginationElement extends Components.GuxPagination, HTMLStencilElement {
    }
    var HTMLGuxPaginationElement: {
        prototype: HTMLGuxPaginationElement;
        new (): HTMLGuxPaginationElement;
    };
    interface HTMLGuxPaginationBetaElement extends Components.GuxPaginationBeta, HTMLStencilElement {
    }
    var HTMLGuxPaginationBetaElement: {
        prototype: HTMLGuxPaginationBetaElement;
        new (): HTMLGuxPaginationBetaElement;
    };
    interface HTMLGuxPaginationButtonsElement extends Components.GuxPaginationButtons, HTMLStencilElement {
    }
    var HTMLGuxPaginationButtonsElement: {
        prototype: HTMLGuxPaginationButtonsElement;
        new (): HTMLGuxPaginationButtonsElement;
    };
    interface HTMLGuxPaginationButtonsBetaElement extends Components.GuxPaginationButtonsBeta, HTMLStencilElement {
    }
    var HTMLGuxPaginationButtonsBetaElement: {
        prototype: HTMLGuxPaginationButtonsBetaElement;
        new (): HTMLGuxPaginationButtonsBetaElement;
    };
    interface HTMLGuxPaginationCursorElement extends Components.GuxPaginationCursor, HTMLStencilElement {
    }
    var HTMLGuxPaginationCursorElement: {
        prototype: HTMLGuxPaginationCursorElement;
        new (): HTMLGuxPaginationCursorElement;
    };
    interface HTMLGuxPaginationItemCountsElement extends Components.GuxPaginationItemCounts, HTMLStencilElement {
    }
    var HTMLGuxPaginationItemCountsElement: {
        prototype: HTMLGuxPaginationItemCountsElement;
        new (): HTMLGuxPaginationItemCountsElement;
    };
    interface HTMLGuxPaginationItemCountsBetaElement extends Components.GuxPaginationItemCountsBeta, HTMLStencilElement {
    }
    var HTMLGuxPaginationItemCountsBetaElement: {
        prototype: HTMLGuxPaginationItemCountsBetaElement;
        new (): HTMLGuxPaginationItemCountsBetaElement;
    };
    interface HTMLGuxPaginationItemsPerPageElement extends Components.GuxPaginationItemsPerPage, HTMLStencilElement {
    }
    var HTMLGuxPaginationItemsPerPageElement: {
        prototype: HTMLGuxPaginationItemsPerPageElement;
        new (): HTMLGuxPaginationItemsPerPageElement;
    };
    interface HTMLGuxPaginationItemsPerPageBetaElement extends Components.GuxPaginationItemsPerPageBeta, HTMLStencilElement {
    }
    var HTMLGuxPaginationItemsPerPageBetaElement: {
        prototype: HTMLGuxPaginationItemsPerPageBetaElement;
        new (): HTMLGuxPaginationItemsPerPageBetaElement;
    };
    interface HTMLGuxPanelFrameLegacyElement extends Components.GuxPanelFrameLegacy, HTMLStencilElement {
    }
    var HTMLGuxPanelFrameLegacyElement: {
        prototype: HTMLGuxPanelFrameLegacyElement;
        new (): HTMLGuxPanelFrameLegacyElement;
    };
    interface HTMLGuxPhoneInputBetaElement extends Components.GuxPhoneInputBeta, HTMLStencilElement {
    }
    var HTMLGuxPhoneInputBetaElement: {
        prototype: HTMLGuxPhoneInputBetaElement;
        new (): HTMLGuxPhoneInputBetaElement;
    };
    interface HTMLGuxPopoverElement extends Components.GuxPopover, HTMLStencilElement {
    }
    var HTMLGuxPopoverElement: {
        prototype: HTMLGuxPopoverElement;
        new (): HTMLGuxPopoverElement;
    };
    interface HTMLGuxPopoverBetaElement extends Components.GuxPopoverBeta, HTMLStencilElement {
    }
    var HTMLGuxPopoverBetaElement: {
        prototype: HTMLGuxPopoverBetaElement;
        new (): HTMLGuxPopoverBetaElement;
    };
    interface HTMLGuxPopoverListElement extends Components.GuxPopoverList, HTMLStencilElement {
    }
    var HTMLGuxPopoverListElement: {
        prototype: HTMLGuxPopoverListElement;
        new (): HTMLGuxPopoverListElement;
    };
    interface HTMLGuxPopoverListBetaElement extends Components.GuxPopoverListBeta, HTMLStencilElement {
    }
    var HTMLGuxPopoverListBetaElement: {
        prototype: HTMLGuxPopoverListBetaElement;
        new (): HTMLGuxPopoverListBetaElement;
    };
    interface HTMLGuxPopupElement extends Components.GuxPopup, HTMLStencilElement {
    }
    var HTMLGuxPopupElement: {
        prototype: HTMLGuxPopupElement;
        new (): HTMLGuxPopupElement;
    };
    interface HTMLGuxPopupBetaElement extends Components.GuxPopupBeta, HTMLStencilElement {
    }
    var HTMLGuxPopupBetaElement: {
        prototype: HTMLGuxPopupBetaElement;
        new (): HTMLGuxPopupBetaElement;
    };
    interface HTMLGuxRadialLoadingElement extends Components.GuxRadialLoading, HTMLStencilElement {
    }
    var HTMLGuxRadialLoadingElement: {
        prototype: HTMLGuxRadialLoadingElement;
        new (): HTMLGuxRadialLoadingElement;
    };
    interface HTMLGuxRadialProgressElement extends Components.GuxRadialProgress, HTMLStencilElement {
    }
    var HTMLGuxRadialProgressElement: {
        prototype: HTMLGuxRadialProgressElement;
        new (): HTMLGuxRadialProgressElement;
    };
    interface HTMLGuxRatingElement extends Components.GuxRating, HTMLStencilElement {
    }
    var HTMLGuxRatingElement: {
        prototype: HTMLGuxRatingElement;
        new (): HTMLGuxRatingElement;
    };
    interface HTMLGuxRegionIconElement extends Components.GuxRegionIcon, HTMLStencilElement {
    }
    var HTMLGuxRegionIconElement: {
        prototype: HTMLGuxRegionIconElement;
        new (): HTMLGuxRegionIconElement;
    };
    interface HTMLGuxRowSelectElement extends Components.GuxRowSelect, HTMLStencilElement {
    }
    var HTMLGuxRowSelectElement: {
        prototype: HTMLGuxRowSelectElement;
        new (): HTMLGuxRowSelectElement;
    };
    interface HTMLGuxScreenReaderBetaElement extends Components.GuxScreenReaderBeta, HTMLStencilElement {
    }
    var HTMLGuxScreenReaderBetaElement: {
        prototype: HTMLGuxScreenReaderBetaElement;
        new (): HTMLGuxScreenReaderBetaElement;
    };
    interface HTMLGuxSidePanelButtonElement extends Components.GuxSidePanelButton, HTMLStencilElement {
    }
    var HTMLGuxSidePanelButtonElement: {
        prototype: HTMLGuxSidePanelButtonElement;
        new (): HTMLGuxSidePanelButtonElement;
    };
    interface HTMLGuxSidePanelLegacyElement extends Components.GuxSidePanelLegacy, HTMLStencilElement {
    }
    var HTMLGuxSidePanelLegacyElement: {
        prototype: HTMLGuxSidePanelLegacyElement;
        new (): HTMLGuxSidePanelLegacyElement;
    };
    interface HTMLGuxSimpleToastElement extends Components.GuxSimpleToast, HTMLStencilElement {
    }
    var HTMLGuxSimpleToastElement: {
        prototype: HTMLGuxSimpleToastElement;
        new (): HTMLGuxSimpleToastElement;
    };
    interface HTMLGuxSkipNavigationItemElement extends Components.GuxSkipNavigationItem, HTMLStencilElement {
    }
    var HTMLGuxSkipNavigationItemElement: {
        prototype: HTMLGuxSkipNavigationItemElement;
        new (): HTMLGuxSkipNavigationItemElement;
    };
    interface HTMLGuxSkipNavigationListBetaElement extends Components.GuxSkipNavigationListBeta, HTMLStencilElement {
    }
    var HTMLGuxSkipNavigationListBetaElement: {
        prototype: HTMLGuxSkipNavigationListBetaElement;
        new (): HTMLGuxSkipNavigationListBetaElement;
    };
    interface HTMLGuxSortControlElement extends Components.GuxSortControl, HTMLStencilElement {
    }
    var HTMLGuxSortControlElement: {
        prototype: HTMLGuxSortControlElement;
        new (): HTMLGuxSortControlElement;
    };
    interface HTMLGuxSubmenuElement extends Components.GuxSubmenu, HTMLStencilElement {
    }
    var HTMLGuxSubmenuElement: {
        prototype: HTMLGuxSubmenuElement;
        new (): HTMLGuxSubmenuElement;
    };
    interface HTMLGuxSwitchElement extends Components.GuxSwitch, HTMLStencilElement {
    }
    var HTMLGuxSwitchElement: {
        prototype: HTMLGuxSwitchElement;
        new (): HTMLGuxSwitchElement;
    };
    interface HTMLGuxSwitchItemElement extends Components.GuxSwitchItem, HTMLStencilElement {
    }
    var HTMLGuxSwitchItemElement: {
        prototype: HTMLGuxSwitchItemElement;
        new (): HTMLGuxSwitchItemElement;
    };
    interface HTMLGuxTabElement extends Components.GuxTab, HTMLStencilElement {
    }
    var HTMLGuxTabElement: {
        prototype: HTMLGuxTabElement;
        new (): HTMLGuxTabElement;
    };
    interface HTMLGuxTabAdvancedElement extends Components.GuxTabAdvanced, HTMLStencilElement {
    }
    var HTMLGuxTabAdvancedElement: {
        prototype: HTMLGuxTabAdvancedElement;
        new (): HTMLGuxTabAdvancedElement;
    };
    interface HTMLGuxTabAdvancedListElement extends Components.GuxTabAdvancedList, HTMLStencilElement {
    }
    var HTMLGuxTabAdvancedListElement: {
        prototype: HTMLGuxTabAdvancedListElement;
        new (): HTMLGuxTabAdvancedListElement;
    };
    interface HTMLGuxTabAdvancedPanelElement extends Components.GuxTabAdvancedPanel, HTMLStencilElement {
    }
    var HTMLGuxTabAdvancedPanelElement: {
        prototype: HTMLGuxTabAdvancedPanelElement;
        new (): HTMLGuxTabAdvancedPanelElement;
    };
    interface HTMLGuxTabDropdownOptionLegacyElement extends Components.GuxTabDropdownOptionLegacy, HTMLStencilElement {
    }
    var HTMLGuxTabDropdownOptionLegacyElement: {
        prototype: HTMLGuxTabDropdownOptionLegacyElement;
        new (): HTMLGuxTabDropdownOptionLegacyElement;
    };
    interface HTMLGuxTabLegacyElement extends Components.GuxTabLegacy, HTMLStencilElement {
    }
    var HTMLGuxTabLegacyElement: {
        prototype: HTMLGuxTabLegacyElement;
        new (): HTMLGuxTabLegacyElement;
    };
    interface HTMLGuxTabListElement extends Components.GuxTabList, HTMLStencilElement {
    }
    var HTMLGuxTabListElement: {
        prototype: HTMLGuxTabListElement;
        new (): HTMLGuxTabListElement;
    };
    interface HTMLGuxTabPanelElement extends Components.GuxTabPanel, HTMLStencilElement {
    }
    var HTMLGuxTabPanelElement: {
        prototype: HTMLGuxTabPanelElement;
        new (): HTMLGuxTabPanelElement;
    };
    interface HTMLGuxTabPanelBetaElement extends Components.GuxTabPanelBeta, HTMLStencilElement {
    }
    var HTMLGuxTabPanelBetaElement: {
        prototype: HTMLGuxTabPanelBetaElement;
        new (): HTMLGuxTabPanelBetaElement;
    };
    interface HTMLGuxTableBetaElement extends Components.GuxTableBeta, HTMLStencilElement {
    }
    var HTMLGuxTableBetaElement: {
        prototype: HTMLGuxTableBetaElement;
        new (): HTMLGuxTableBetaElement;
    };
    interface HTMLGuxTableSelectMenuElement extends Components.GuxTableSelectMenu, HTMLStencilElement {
    }
    var HTMLGuxTableSelectMenuElement: {
        prototype: HTMLGuxTableSelectMenuElement;
        new (): HTMLGuxTableSelectMenuElement;
    };
    interface HTMLGuxTableSelectPopoverElement extends Components.GuxTableSelectPopover, HTMLStencilElement {
    }
    var HTMLGuxTableSelectPopoverElement: {
        prototype: HTMLGuxTableSelectPopoverElement;
        new (): HTMLGuxTableSelectPopoverElement;
    };
    interface HTMLGuxTableToolbarActionElement extends Components.GuxTableToolbarAction, HTMLStencilElement {
    }
    var HTMLGuxTableToolbarActionElement: {
        prototype: HTMLGuxTableToolbarActionElement;
        new (): HTMLGuxTableToolbarActionElement;
    };
    interface HTMLGuxTableToolbarBetaElement extends Components.GuxTableToolbarBeta, HTMLStencilElement {
    }
    var HTMLGuxTableToolbarBetaElement: {
        prototype: HTMLGuxTableToolbarBetaElement;
        new (): HTMLGuxTableToolbarBetaElement;
    };
    interface HTMLGuxTableToolbarCustomActionElement extends Components.GuxTableToolbarCustomAction, HTMLStencilElement {
    }
    var HTMLGuxTableToolbarCustomActionElement: {
        prototype: HTMLGuxTableToolbarCustomActionElement;
        new (): HTMLGuxTableToolbarCustomActionElement;
    };
    interface HTMLGuxTableToolbarMenuButtonElement extends Components.GuxTableToolbarMenuButton, HTMLStencilElement {
    }
    var HTMLGuxTableToolbarMenuButtonElement: {
        prototype: HTMLGuxTableToolbarMenuButtonElement;
        new (): HTMLGuxTableToolbarMenuButtonElement;
    };
    interface HTMLGuxTabsElement extends Components.GuxTabs, HTMLStencilElement {
    }
    var HTMLGuxTabsElement: {
        prototype: HTMLGuxTabsElement;
        new (): HTMLGuxTabsElement;
    };
    interface HTMLGuxTabsAdvancedElement extends Components.GuxTabsAdvanced, HTMLStencilElement {
    }
    var HTMLGuxTabsAdvancedElement: {
        prototype: HTMLGuxTabsAdvancedElement;
        new (): HTMLGuxTabsAdvancedElement;
    };
    interface HTMLGuxTabsLegacyElement extends Components.GuxTabsLegacy, HTMLStencilElement {
    }
    var HTMLGuxTabsLegacyElement: {
        prototype: HTMLGuxTabsLegacyElement;
        new (): HTMLGuxTabsLegacyElement;
    };
    interface HTMLGuxTagBetaElement extends Components.GuxTagBeta, HTMLStencilElement {
    }
    var HTMLGuxTagBetaElement: {
        prototype: HTMLGuxTagBetaElement;
        new (): HTMLGuxTagBetaElement;
    };
    interface HTMLGuxTextHighlightElement extends Components.GuxTextHighlight, HTMLStencilElement {
    }
    var HTMLGuxTextHighlightElement: {
        prototype: HTMLGuxTextHighlightElement;
        new (): HTMLGuxTextHighlightElement;
    };
    interface HTMLGuxTextLabelLegacyElement extends Components.GuxTextLabelLegacy, HTMLStencilElement {
    }
    var HTMLGuxTextLabelLegacyElement: {
        prototype: HTMLGuxTextLabelLegacyElement;
        new (): HTMLGuxTextLabelLegacyElement;
    };
    interface HTMLGuxTimeBetaElement extends Components.GuxTimeBeta, HTMLStencilElement {
    }
    var HTMLGuxTimeBetaElement: {
        prototype: HTMLGuxTimeBetaElement;
        new (): HTMLGuxTimeBetaElement;
    };
    interface HTMLGuxTimePickerBetaElement extends Components.GuxTimePickerBeta, HTMLStencilElement {
    }
    var HTMLGuxTimePickerBetaElement: {
        prototype: HTMLGuxTimePickerBetaElement;
        new (): HTMLGuxTimePickerBetaElement;
    };
    interface HTMLGuxToggleElement extends Components.GuxToggle, HTMLStencilElement {
    }
    var HTMLGuxToggleElement: {
        prototype: HTMLGuxToggleElement;
        new (): HTMLGuxToggleElement;
    };
    interface HTMLGuxToggleSliderElement extends Components.GuxToggleSlider, HTMLStencilElement {
    }
    var HTMLGuxToggleSliderElement: {
        prototype: HTMLGuxToggleSliderElement;
        new (): HTMLGuxToggleSliderElement;
    };
    interface HTMLGuxTooltipElement extends Components.GuxTooltip, HTMLStencilElement {
    }
    var HTMLGuxTooltipElement: {
        prototype: HTMLGuxTooltipElement;
        new (): HTMLGuxTooltipElement;
    };
    interface HTMLGuxTooltipTitleElement extends Components.GuxTooltipTitle, HTMLStencilElement {
    }
    var HTMLGuxTooltipTitleElement: {
        prototype: HTMLGuxTooltipTitleElement;
        new (): HTMLGuxTooltipTitleElement;
    };
    interface HTMLGuxTruncateBetaElement extends Components.GuxTruncateBeta, HTMLStencilElement {
    }
    var HTMLGuxTruncateBetaElement: {
        prototype: HTMLGuxTruncateBetaElement;
        new (): HTMLGuxTruncateBetaElement;
    };
    interface HTMLGuxVisualizationBetaElement extends Components.GuxVisualizationBeta, HTMLStencilElement {
    }
    var HTMLGuxVisualizationBetaElement: {
        prototype: HTMLGuxVisualizationBetaElement;
        new (): HTMLGuxVisualizationBetaElement;
    };
    interface HTMLElementTagNameMap {
        "gux-accordion": HTMLGuxAccordionElement;
        "gux-accordion-legacy": HTMLGuxAccordionLegacyElement;
        "gux-accordion-section": HTMLGuxAccordionSectionElement;
        "gux-action-button": HTMLGuxActionButtonElement;
        "gux-action-button-legacy": HTMLGuxActionButtonLegacyElement;
        "gux-action-item": HTMLGuxActionItemElement;
        "gux-action-list-divider": HTMLGuxActionListDividerElement;
        "gux-action-list-legacy": HTMLGuxActionListLegacyElement;
        "gux-action-toast": HTMLGuxActionToastElement;
        "gux-advanced-dropdown": HTMLGuxAdvancedDropdownElement;
        "gux-all-row-select": HTMLGuxAllRowSelectElement;
        "gux-announce-beta": HTMLGuxAnnounceBetaElement;
        "gux-badge-beta": HTMLGuxBadgeBetaElement;
        "gux-blank-state-beta": HTMLGuxBlankStateBetaElement;
        "gux-breadcrumb-item": HTMLGuxBreadcrumbItemElement;
        "gux-breadcrumbs": HTMLGuxBreadcrumbsElement;
        "gux-button": HTMLGuxButtonElement;
        "gux-button-multi": HTMLGuxButtonMultiElement;
        "gux-button-multi-legacy": HTMLGuxButtonMultiLegacyElement;
        "gux-button-slot-beta": HTMLGuxButtonSlotBetaElement;
        "gux-calendar": HTMLGuxCalendarElement;
        "gux-card-beta": HTMLGuxCardBetaElement;
        "gux-chart-column-beta": HTMLGuxChartColumnBetaElement;
        "gux-chart-donut-beta": HTMLGuxChartDonutBetaElement;
        "gux-chart-line-beta": HTMLGuxChartLineBetaElement;
        "gux-chart-pie-beta": HTMLGuxChartPieBetaElement;
        "gux-chart-scatter-plot-beta": HTMLGuxChartScatterPlotBetaElement;
        "gux-color-select": HTMLGuxColorSelectElement;
        "gux-column-manager-beta": HTMLGuxColumnManagerBetaElement;
        "gux-column-manager-item": HTMLGuxColumnManagerItemElement;
        "gux-command-action": HTMLGuxCommandActionElement;
        "gux-command-palette-legacy": HTMLGuxCommandPaletteLegacyElement;
        "gux-content-search": HTMLGuxContentSearchElement;
        "gux-context-menu-beta": HTMLGuxContextMenuBetaElement;
        "gux-copy-to-clipboard-beta": HTMLGuxCopyToClipboardBetaElement;
        "gux-create-option": HTMLGuxCreateOptionElement;
        "gux-date-beta": HTMLGuxDateBetaElement;
        "gux-date-time-beta": HTMLGuxDateTimeBetaElement;
        "gux-datepicker": HTMLGuxDatepickerElement;
        "gux-disclosure-button": HTMLGuxDisclosureButtonElement;
        "gux-dismiss-button": HTMLGuxDismissButtonElement;
        "gux-dropdown": HTMLGuxDropdownElement;
        "gux-dropdown-legacy": HTMLGuxDropdownLegacyElement;
        "gux-dropdown-multi-beta": HTMLGuxDropdownMultiBetaElement;
        "gux-dropdown-multi-tag": HTMLGuxDropdownMultiTagElement;
        "gux-dropdown-option": HTMLGuxDropdownOptionElement;
        "gux-error-message-beta": HTMLGuxErrorMessageBetaElement;
        "gux-flyout-menu-beta": HTMLGuxFlyoutMenuBetaElement;
        "gux-form-field-checkbox": HTMLGuxFormFieldCheckboxElement;
        "gux-form-field-color": HTMLGuxFormFieldColorElement;
        "gux-form-field-dropdown": HTMLGuxFormFieldDropdownElement;
        "gux-form-field-input-clear-button": HTMLGuxFormFieldInputClearButtonElement;
        "gux-form-field-legacy": HTMLGuxFormFieldLegacyElement;
        "gux-form-field-number": HTMLGuxFormFieldNumberElement;
        "gux-form-field-phone": HTMLGuxFormFieldPhoneElement;
        "gux-form-field-radio": HTMLGuxFormFieldRadioElement;
        "gux-form-field-range": HTMLGuxFormFieldRangeElement;
        "gux-form-field-search": HTMLGuxFormFieldSearchElement;
        "gux-form-field-select": HTMLGuxFormFieldSelectElement;
        "gux-form-field-text-like": HTMLGuxFormFieldTextLikeElement;
        "gux-form-field-textarea": HTMLGuxFormFieldTextareaElement;
        "gux-form-field-time-picker": HTMLGuxFormFieldTimePickerElement;
        "gux-icon": HTMLGuxIconElement;
        "gux-inline-alert-beta": HTMLGuxInlineAlertBetaElement;
        "gux-input-checkbox": HTMLGuxInputCheckboxElement;
        "gux-input-color": HTMLGuxInputColorElement;
        "gux-input-color-option": HTMLGuxInputColorOptionElement;
        "gux-input-number": HTMLGuxInputNumberElement;
        "gux-input-radio": HTMLGuxInputRadioElement;
        "gux-input-range": HTMLGuxInputRangeElement;
        "gux-input-search": HTMLGuxInputSearchElement;
        "gux-input-select": HTMLGuxInputSelectElement;
        "gux-input-text-like": HTMLGuxInputTextLikeElement;
        "gux-input-textarea": HTMLGuxInputTextareaElement;
        "gux-list": HTMLGuxListElement;
        "gux-list-divider": HTMLGuxListDividerElement;
        "gux-list-divider-legacy": HTMLGuxListDividerLegacyElement;
        "gux-list-item": HTMLGuxListItemElement;
        "gux-list-item-legacy": HTMLGuxListItemLegacyElement;
        "gux-list-legacy": HTMLGuxListLegacyElement;
        "gux-listbox": HTMLGuxListboxElement;
        "gux-listbox-multi": HTMLGuxListboxMultiElement;
        "gux-loading-message-beta": HTMLGuxLoadingMessageBetaElement;
        "gux-menu": HTMLGuxMenuElement;
        "gux-menu-option": HTMLGuxMenuOptionElement;
        "gux-modal": HTMLGuxModalElement;
        "gux-month-calendar": HTMLGuxMonthCalendarElement;
        "gux-month-list": HTMLGuxMonthListElement;
        "gux-month-list-item": HTMLGuxMonthListItemElement;
        "gux-month-picker-beta": HTMLGuxMonthPickerBetaElement;
        "gux-notification-toast": HTMLGuxNotificationToastElement;
        "gux-option": HTMLGuxOptionElement;
        "gux-option-icon": HTMLGuxOptionIconElement;
        "gux-option-legacy": HTMLGuxOptionLegacyElement;
        "gux-option-multi": HTMLGuxOptionMultiElement;
        "gux-page-loading-spinner": HTMLGuxPageLoadingSpinnerElement;
        "gux-pagination": HTMLGuxPaginationElement;
        "gux-pagination-beta": HTMLGuxPaginationBetaElement;
        "gux-pagination-buttons": HTMLGuxPaginationButtonsElement;
        "gux-pagination-buttons-beta": HTMLGuxPaginationButtonsBetaElement;
        "gux-pagination-cursor": HTMLGuxPaginationCursorElement;
        "gux-pagination-item-counts": HTMLGuxPaginationItemCountsElement;
        "gux-pagination-item-counts-beta": HTMLGuxPaginationItemCountsBetaElement;
        "gux-pagination-items-per-page": HTMLGuxPaginationItemsPerPageElement;
        "gux-pagination-items-per-page-beta": HTMLGuxPaginationItemsPerPageBetaElement;
        "gux-panel-frame-legacy": HTMLGuxPanelFrameLegacyElement;
        "gux-phone-input-beta": HTMLGuxPhoneInputBetaElement;
        "gux-popover": HTMLGuxPopoverElement;
        "gux-popover-beta": HTMLGuxPopoverBetaElement;
        "gux-popover-list": HTMLGuxPopoverListElement;
        "gux-popover-list-beta": HTMLGuxPopoverListBetaElement;
        "gux-popup": HTMLGuxPopupElement;
        "gux-popup-beta": HTMLGuxPopupBetaElement;
        "gux-radial-loading": HTMLGuxRadialLoadingElement;
        "gux-radial-progress": HTMLGuxRadialProgressElement;
        "gux-rating": HTMLGuxRatingElement;
        "gux-region-icon": HTMLGuxRegionIconElement;
        "gux-row-select": HTMLGuxRowSelectElement;
        "gux-screen-reader-beta": HTMLGuxScreenReaderBetaElement;
        "gux-side-panel-button": HTMLGuxSidePanelButtonElement;
        "gux-side-panel-legacy": HTMLGuxSidePanelLegacyElement;
        "gux-simple-toast": HTMLGuxSimpleToastElement;
        "gux-skip-navigation-item": HTMLGuxSkipNavigationItemElement;
        "gux-skip-navigation-list-beta": HTMLGuxSkipNavigationListBetaElement;
        "gux-sort-control": HTMLGuxSortControlElement;
        "gux-submenu": HTMLGuxSubmenuElement;
        "gux-switch": HTMLGuxSwitchElement;
        "gux-switch-item": HTMLGuxSwitchItemElement;
        "gux-tab": HTMLGuxTabElement;
        "gux-tab-advanced": HTMLGuxTabAdvancedElement;
        "gux-tab-advanced-list": HTMLGuxTabAdvancedListElement;
        "gux-tab-advanced-panel": HTMLGuxTabAdvancedPanelElement;
        "gux-tab-dropdown-option-legacy": HTMLGuxTabDropdownOptionLegacyElement;
        "gux-tab-legacy": HTMLGuxTabLegacyElement;
        "gux-tab-list": HTMLGuxTabListElement;
        "gux-tab-panel": HTMLGuxTabPanelElement;
        "gux-tab-panel-beta": HTMLGuxTabPanelBetaElement;
        "gux-table-beta": HTMLGuxTableBetaElement;
        "gux-table-select-menu": HTMLGuxTableSelectMenuElement;
        "gux-table-select-popover": HTMLGuxTableSelectPopoverElement;
        "gux-table-toolbar-action": HTMLGuxTableToolbarActionElement;
        "gux-table-toolbar-beta": HTMLGuxTableToolbarBetaElement;
        "gux-table-toolbar-custom-action": HTMLGuxTableToolbarCustomActionElement;
        "gux-table-toolbar-menu-button": HTMLGuxTableToolbarMenuButtonElement;
        "gux-tabs": HTMLGuxTabsElement;
        "gux-tabs-advanced": HTMLGuxTabsAdvancedElement;
        "gux-tabs-legacy": HTMLGuxTabsLegacyElement;
        "gux-tag-beta": HTMLGuxTagBetaElement;
        "gux-text-highlight": HTMLGuxTextHighlightElement;
        "gux-text-label-legacy": HTMLGuxTextLabelLegacyElement;
        "gux-time-beta": HTMLGuxTimeBetaElement;
        "gux-time-picker-beta": HTMLGuxTimePickerBetaElement;
        "gux-toggle": HTMLGuxToggleElement;
        "gux-toggle-slider": HTMLGuxToggleSliderElement;
        "gux-tooltip": HTMLGuxTooltipElement;
        "gux-tooltip-title": HTMLGuxTooltipTitleElement;
        "gux-truncate-beta": HTMLGuxTruncateBetaElement;
        "gux-visualization-beta": HTMLGuxVisualizationBetaElement;
    }
}
declare namespace LocalJSX {
    interface GuxAccordion {
        "singleOpenSection"?: boolean;
    }
    interface GuxAccordionLegacy {
        "arrowPosition"?: GuxAccordionLegacyArrowPosition;
        /**
          * The heading level within the page the accordion section headers should be set to. heading-level="3" woudl be equivalent to an h3 element.
         */
        "headingLevel"?: number;
    }
    interface GuxAccordionSection {
        /**
          * Position of the arrow chevron icon. Position can be 'default' or 'before-text'.  'beside-text' is deprecated and will be removed in v4.
         */
        "arrowPosition"?: GuxAccordionSectionArrowPosition;
        /**
          * The content layout used in the accordion section. 'text' layout provides default padding, 'custom' removes default padding.
         */
        "contentLayout"?: GuxAccordionSectionContentLayout;
        "disabled"?: boolean;
        "onInternalsectionopened"?: (event: GuxAccordionSectionCustomEvent<void>) => void;
        "open"?: boolean;
        "reverseHeadings"?: boolean;
    }
    interface GuxActionButton {
        "accent"?: GuxActionButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled"?: boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen"?: boolean;
        /**
          * Triggered when the action button is clicked
         */
        "onActionClick"?: (event: GuxActionButtonCustomEvent<any>) => void;
        /**
          * Triggered when the menu is close
         */
        "onClose"?: (event: GuxActionButtonCustomEvent<any>) => void;
        /**
          * Triggered when the menu is open
         */
        "onOpen"?: (event: GuxActionButtonCustomEvent<any>) => void;
        /**
          * The component text.
         */
        "text"?: string;
        /**
          * The component button type
         */
        "type"?: GuxActionButtonType;
    }
    interface GuxActionButtonLegacy {
        "accent"?: GuxButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled"?: boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen"?: boolean;
        /**
          * Triggered when the action button is clicked
         */
        "onActionClick"?: (event: GuxActionButtonLegacyCustomEvent<any>) => void;
        /**
          * Triggered when the menu is close
         */
        "onClose"?: (event: GuxActionButtonLegacyCustomEvent<any>) => void;
        /**
          * Triggered when the menu is open
         */
        "onOpen"?: (event: GuxActionButtonLegacyCustomEvent<any>) => void;
        /**
          * The component text.
         */
        "text"?: string;
        /**
          * The component button type
         */
        "type"?: GuxButtonType;
    }
    interface GuxActionItem {
        "disabled"?: boolean;
        "onPress"?: (event: GuxActionItemCustomEvent<unknown>) => void;
        "text"?: string;
        "value"?: unknown;
    }
    interface GuxActionListDivider {
    }
    interface GuxActionListLegacy {
    }
    interface GuxActionToast {
    }
    interface GuxAdvancedDropdown {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled"?: boolean;
        /**
          * CSS string used to set the maximum height of the dropdown option container. Default is set to 10 options as defined by UX.
         */
        "dropdownHeight"?: string;
        /**
          * Timeout between filter input changed and event being emitted.
         */
        "filterDebounceTimeout"?: number;
        /**
          * Whether the list should filter its current options.
         */
        "noFilter"?: boolean;
        /**
          * Fires when the filter of the advanced dropdown changes.
         */
        "onFilter"?: (event: GuxAdvancedDropdownCustomEvent<string>) => void;
        /**
          * Fires when the value of the advanced dropdown changes.
         */
        "onInput"?: (event: GuxAdvancedDropdownCustomEvent<string>) => void;
        /**
          * The dropdown's placeholder.
         */
        "placeholder"?: string;
    }
    interface GuxAllRowSelect {
        "onInternalallrowselectchange"?: (event: GuxAllRowSelectCustomEvent<any>) => void;
        "selected"?: boolean;
    }
    interface GuxAnnounceBeta {
        "politeness"?: GuxAnnouncePoliteness;
    }
    interface GuxBadgeBeta {
        /**
          * Bold badge.
         */
        "bold"?: boolean;
        /**
          * Badge background color.
         */
        "color"?: GuxBadgeColor;
    }
    interface GuxBlankStateBeta {
    }
    interface GuxBreadcrumbItem {
        "href"?: string;
    }
    interface GuxBreadcrumbs {
        "accent"?: GuxBreadcrumbAccent;
    }
    interface GuxButton {
        "accent"?: GuxButtonAccent1;
        /**
          * Indicate if the button is disabled or not
         */
        "disabled"?: boolean;
        /**
          * The component title
         */
        "guxTitle"?: string;
        /**
          * The component button type
         */
        "type"?: GuxButtonType1;
    }
    interface GuxButtonMulti {
        "accent"?: GuxButtonMultiAccent;
        /**
          * Disables the action button.
         */
        "disabled"?: boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen"?: boolean;
        /**
          * Triggered when the menu is close
         */
        "onClose"?: (event: GuxButtonMultiCustomEvent<any>) => void;
        /**
          * Triggered when the menu is open
         */
        "onOpen"?: (event: GuxButtonMultiCustomEvent<any>) => void;
        /**
          * The component text.
         */
        "text"?: string;
    }
    interface GuxButtonMultiLegacy {
        "accent"?: GuxButtonAccent;
        /**
          * Disables the action button.
         */
        "disabled"?: boolean;
        /**
          * It is used to open or not the list.
         */
        "isOpen"?: boolean;
        /**
          * Triggered when the menu is close
         */
        "onClose"?: (event: GuxButtonMultiLegacyCustomEvent<any>) => void;
        /**
          * Triggered when the menu is open
         */
        "onOpen"?: (event: GuxButtonMultiLegacyCustomEvent<any>) => void;
        /**
          * The component text.
         */
        "text"?: string;
    }
    interface GuxButtonSlotBeta {
        "accent"?: GuxButtonAccent1;
    }
    interface GuxCalendar {
        /**
          * The max date selectable
         */
        "maxDate"?: string;
        /**
          * The min date selectable
         */
        "minDate"?: string;
        /**
          * The calendar mode (can be single or range)
         */
        "mode"?: GuxCalendarMode;
        /**
          * The calendar number of months displayed
         */
        "numberOfMonths"?: number;
        /**
          * Triggered when user selects a date
         */
        "onInput"?: (event: GuxCalendarCustomEvent<string>) => void;
        /**
          * The day of the week to start each calendar row. ISO weekday number ie 1 - Monday, 2 - Tuesday, ... 7 - Sunday
         */
        "startDayOfWeek"?: GuxCalendarDayOfWeek;
        /**
          * The calendar current selected date
         */
        "value"?: string;
    }
    interface GuxCardBeta {
        /**
          * Card Accent.
         */
        "accent"?: GuxCardAccent;
    }
    interface GuxChartColumnBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData"?: Record<string, any>;
        /**
          * List specifying the order of optional chart layers. For correct chart layering, each chartData entry must also include a "series" field with a value indicating which layer the entry belongs to, e.g 'series': 'group1'
         */
        "chartLayers"?: string[];
        "embedOptions"?: EmbedOptions;
        "includeLegend"?: boolean;
        "legendPosition"?: | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle"?: string;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName"?: string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant"?: boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName"?: string;
    }
    interface GuxChartDonutBeta {
        "centerSubText"?: string;
        "centerText"?: string;
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData"?: Record<string, any>;
        "colorFieldName"?: string;
        "embedOptions"?: EmbedOptions;
        "gauge"?: boolean;
        "includeLegend"?: boolean;
        "innerRadius"?: number;
        "labelField"?: string;
        "labelRadius"?: number;
        "legendFontSize"?: number;
        "legendPosition"?: | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        "legendSymbolSize"?: number;
        "legendTitle"?: string;
        "legendX"?: number;
        "legendY"?: number;
        "outerRadius"?: number;
        "showTooltip"?: boolean;
        "tooltipOptions"?: EmbedOptions;
    }
    interface GuxChartLineBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData"?: Record<string, any>;
        "colorFieldName"?: string;
        "embedOptions"?: EmbedOptions;
        "includeDataPointMarkers"?: boolean;
        "includeLegend"?: boolean;
        "interpolation"?: string;
        "legendPosition"?: | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle"?: string;
        "strokeDash"?: boolean;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName"?: string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant"?: boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName"?: string;
    }
    interface GuxChartPieBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData"?: Record<string, any>;
        "colorFieldName"?: string;
        "embedOptions"?: EmbedOptions;
        "includeLegend"?: boolean;
        "labelField"?: string;
        "labelRadius"?: number;
        "legendPosition"?: | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        "legendTitle"?: string;
        "outerRadius"?: number;
    }
    interface GuxChartScatterPlotBeta {
        /**
          * Data to be rendered in the chart. Data field names must match the values you set in xFieldName and yFieldName
         */
        "chartData"?: Record<string, any>;
        /**
          * Type of category to plot in the chart
         */
        "colorFieldName"?: string;
        "embedOptions"?: EmbedOptions;
        "includeLegend"?: boolean;
        "legendPosition"?: | 'left'
    | 'right'
    | 'top'
    | 'bottom'
    | 'top-left'
    | 'top-right'
    | 'bottom-left'
    | 'bottom-right'
    | 'none';
        /**
          * Title to display above the optional legend
         */
        "legendTitle"?: string;
        /**
          * The shape of the plotting in the chart - Square, Circle and Point
         */
        "useShape"?: string;
        /**
          * Title to display along the x-axis
         */
        "xAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. xFieldName of "category" will map any "category" fields in chartData to the x-axis
         */
        "xFieldName"?: string;
        /**
          * If true, then make Axis tick label 45 degrees
         */
        "xTickLabelSlant"?: boolean;
        /**
          * Title to display along the y-axis
         */
        "yAxisTitle"?: string;
        /**
          * Name for the data field to use to populate the chart's x-axis e.g. yFieldName of "value" will map any "value" fields in chartData to the y-axis
         */
        "yFieldName"?: string;
    }
    interface GuxColorSelect {
    }
    interface GuxColumnManagerBeta {
        "onGuxorderchange"?: (event: GuxColumnManagerBetaCustomEvent<GuxOrder>) => void;
    }
    interface GuxColumnManagerItem {
        "onInternal_keyboard_reorder_emit"?: (event: GuxColumnManagerItemCustomEvent<void>) => void;
        "onInternal_keyboard_reorder_finish"?: (event: GuxColumnManagerItemCustomEvent<void>) => void;
        "onInternal_keyboard_reorder_move"?: (event: GuxColumnManagerItemCustomEvent<InternalKeyboardReorderMove>) => void;
        "onInternal_keyboard_reorder_start"?: (event: GuxColumnManagerItemCustomEvent<string>) => void;
        "onInternal_order_change"?: (event: GuxColumnManagerItemCustomEvent<InternalOrderChange>) => void;
        "orderId"?: string;
    }
    interface GuxCommandAction {
        /**
          * If the command is a common command. Common commands are choosen defaults a user might want to use.
         */
        "common"?: boolean;
        /**
          * Details about the command. This acts as extra contextual information about the command.
         */
        "details"?: string;
        /**
          * Emits when the list item is clicked, or enter/space is pressed.
         */
        "onPress"?: (event: GuxCommandActionCustomEvent<void>) => void;
        /**
          * If the command is a recent command. Recent commands are commands that the user has recently issued.
         */
        "recent"?: boolean;
        /**
          * The shortcut for the command. Textual representation of a shortcut associated with this command, if it exists.
         */
        "shortcut"?: string;
        /**
          * The textual value of the command.
         */
        "text"?: string;
    }
    interface GuxCommandPaletteLegacy {
    }
    interface GuxContentSearch {
        /**
          * The Current match count which needs to highlighted
         */
        "currentMatch"?: number;
        /**
          * The Match Count
         */
        "matchCount"?: number;
        /**
          * Triggered when Current match value changes
          * @return The Current match value
         */
        "onGuxcurrentmatchchanged"?: (event: GuxContentSearchCustomEvent<number>) => void;
    }
    interface GuxContextMenuBeta {
        /**
          * Screenreader text for context menu button defaults to "context menu"
         */
        "screenreaderText"?: string;
    }
    interface GuxCopyToClipboardBeta {
    }
    interface GuxCreateOption {
        "active"?: boolean;
        "filtered"?: boolean;
        "hidden"?: boolean;
        "onInternalcreatenewoption"?: (event: GuxCreateOptionCustomEvent<string>) => void;
        "value"?: string;
    }
    interface GuxDateBeta {
        /**
          * The ISO string representation of the date to format
         */
        "datetime"?: string;
        /**
          * Format option type
         */
        "format"?: GuxDateTimeFormat;
    }
    interface GuxDateTimeBeta {
        /**
          * The ISO string representation of the datetime to format
         */
        "datetime"?: string;
        /**
          * Format option type
         */
        "format"?: GuxDateTimeFormat;
    }
    interface GuxDatepicker {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled"?: boolean;
        /**
          * The datepicker date format (default to mm/dd/yyyy, or specified)
         */
        "format"?: string;
        /**
          * The datepicker label (can be a single label, or two separated by a comma if it's a range datepicker)
         */
        "label"?: string;
        /**
          * The max date selectable
         */
        "maxDate"?: string;
        /**
          * The min date selectable
         */
        "minDate"?: string;
        /**
          * The calendar mode (can be single or range)
         */
        "mode"?: GuxDatepickerMode;
        /**
          * The datepicker number of months displayed
         */
        "numberOfMonths"?: number;
        /**
          * Triggered when user selects a date
         */
        "onInput"?: (event: GuxDatepickerCustomEvent<string>) => void;
        /**
          * The day of the week to start each calendar row. 1 - Monday, 2 - Tuesday, ... 7 - Sunday
         */
        "startDayOfWeek"?: GuxCalendarDayOfWeek;
        /**
          * The datepicker current value
         */
        "value"?: string;
    }
    interface GuxDisclosureButton {
        /**
          * Used to open or close the disclosure panel
         */
        "isOpen"?: boolean;
        /**
          * Indicates the label for the disclosure button
         */
        "label"?: string;
        /**
          * Return the state of the components panel on state change
          * @return the panel state
         */
        "onActive"?: (event: GuxDisclosureButtonCustomEvent<boolean>) => void;
        /**
          * Indicates the position of the button panel
         */
        "position"?: GuxDisclosureButtonPosition;
    }
    interface GuxDismissButton {
        "position"?: GuxDismissButtonPosition;
    }
    /**
     * Our Dropdown component. In the most basic case, it's used with `gux-option` to give users
     * a list of text options to select from, but other types of options with different appearance
     * can be created by creating a new component and adding it to `validOptionTags` list in
     * gux-dropdown-types.ts, then following the resulting compiler errors.
     */
    interface GuxDropdown {
        "disabled"?: boolean;
        "filterType"?: GuxFilterTypes;
        /**
          * deprecated will be removed in v4 (COMUI-1369). Use filterType instead
         */
        "filterable"?: boolean;
        "hasError"?: boolean;
        "loading"?: boolean;
        "onGuxcollapsed"?: (event: GuxDropdownCustomEvent<void>) => void;
        "onGuxexpanded"?: (event: GuxDropdownCustomEvent<void>) => void;
        "onGuxfilter"?: (event: GuxDropdownCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface GuxDropdownLegacy {
        /**
          * Disable the input and prevent interactions.
         */
        "disabled"?: boolean;
        /**
          * Whether the user can filter or not.
         */
        "filterable"?: boolean;
        /**
          * Sets the select mode (default, page or palette).
         */
        "mode"?: 'default' | 'page' | 'palette';
        /**
          * Emits when selection is changed.
         */
        "onChange"?: (event: GuxDropdownLegacyCustomEvent<string>) => void;
        /**
          * The dropdown placeholder.
         */
        "placeholder"?: string;
        /**
          * Indicate the dropdown input value
         */
        "value"?: string;
    }
    interface GuxDropdownMultiBeta {
        "disabled"?: boolean;
        /**
          * Override default filtering behavior
         */
        "filterType"?: GuxFilterTypes;
        /**
          * deprecated will be removed in v4 (COMUI-1369). Use filterType instead
         */
        "filterable"?: boolean;
        "hasError"?: boolean;
        "loading"?: boolean;
        /**
          * This event will run when the dropdown-multi transitions to a collapsed state.
         */
        "onGuxcollapsed"?: (event: GuxDropdownMultiBetaCustomEvent<void>) => void;
        /**
          * This event is emitted to request creating a new option
         */
        "onGuxcreateoption"?: (event: GuxDropdownMultiBetaCustomEvent<any>) => void;
        /**
          * This event will run when the dropdown-multi transitions to an expanded state.
         */
        "onGuxexpanded"?: (event: GuxDropdownMultiBetaCustomEvent<void>) => void;
        "onGuxfilter"?: (event: GuxDropdownMultiBetaCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface GuxDropdownMultiTag {
        /**
          * Tag is removable.
         */
        "disabled"?: boolean;
        "numberSelected"?: number;
        /**
          * Triggered when click on remove button
         */
        "onInternalclearselected"?: (event: GuxDropdownMultiTagCustomEvent<string>) => void;
    }
    interface GuxDropdownOption {
        /**
          * If this Boolean attribute is set, this option is not checkable. It won't receive any browsing events, like mouse clicks or focus-related ones.
         */
        "disabled"?: boolean;
        /**
          * If this Boolean attribute is set, the option is not visible to the select control. This does not mean that it clears the selection if it was previously selected.  Should only be used by internal users.
         */
        "filtered"?: boolean;
        /**
          * Occurs when the item has been selected.
         */
        "onSelectedChanged"?: (event: GuxDropdownOptionCustomEvent<string>) => void;
        /**
          * If present, this Boolean attribute indicates that the option is currently selected.
         */
        "selected"?: boolean;
        "text"?: string;
        /**
          * The content of this attribute represents the value to be submitted on 'input' changes, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value"?: string;
    }
    interface GuxErrorMessageBeta {
    }
    interface GuxFlyoutMenuBeta {
    }
    interface GuxFormFieldCheckbox {
    }
    interface GuxFormFieldColor {
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldDropdown {
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldInputClearButton {
    }
    interface GuxFormFieldLegacy {
        "clearable"?: boolean;
        "displayUnits"?: string;
        "labelPosition"?: GuxFormFieldLabelPosition1;
        "resize"?: GuxInputTextAreaResize;
        "valueInTooltip"?: boolean;
    }
    interface GuxFormFieldNumber {
        "clearable"?: boolean;
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldPhone {
        "labelPosition"?: GuxFormFieldLabelPosition;
        "onPhonevalidationerror"?: (event: GuxFormFieldPhoneCustomEvent<boolean>) => void;
    }
    interface GuxFormFieldRadio {
    }
    interface GuxFormFieldRange {
        "displayUnits"?: string;
        "labelPosition"?: GuxFormFieldLabelPosition;
        "valueInTooltip"?: boolean;
    }
    interface GuxFormFieldSearch {
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldSelect {
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldTextLike {
        "clearable"?: boolean;
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxFormFieldTextarea {
        "labelPosition"?: GuxFormFieldLabelPosition;
        "resize"?: GuxFormFieldTextAreaResize;
    }
    interface GuxFormFieldTimePicker {
        "labelPosition"?: GuxFormFieldLabelPosition;
    }
    interface GuxIcon {
        /**
          * Indicate whether the icon should be ignored by accessibility tools or not
         */
        "decorative"?: boolean;
        /**
          * Indicate which icon to display
         */
        "iconName"?: (string & {}) | GuxIconIconName;
        /**
          * Localized text describing the intent of this icon (not required if `decorative=true`)
         */
        "screenreaderText"?: string;
    }
    interface GuxInlineAlertBeta {
        "accent"?: GuxAlertAccent;
    }
    interface GuxInputCheckbox {
    }
    interface GuxInputColor {
        "guxErrorDescribedby"?: string;
        "guxLabelDescribedby"?: string;
        "guxRequired"?: boolean;
    }
    interface GuxInputColorOption {
        /**
          * Indicate if the tile is active
         */
        "active"?: boolean;
        /**
          * Triggers when a color is selected
         */
        "onColorSelect"?: (event: GuxInputColorOptionCustomEvent<any>) => void;
        /**
          * Indicate the color of the tile, if undefined, tile will be blank and be disabled
         */
        "value"?: string;
    }
    interface GuxInputNumber {
        "clearable"?: boolean;
    }
    interface GuxInputRadio {
    }
    interface GuxInputRange {
        "displayUnits"?: string;
        "valueInTooltip"?: boolean;
    }
    interface GuxInputSearch {
    }
    interface GuxInputSelect {
    }
    interface GuxInputTextLike {
        "clearable"?: boolean;
    }
    interface GuxInputTextarea {
        "resize"?: GuxInputTextAreaResize;
    }
    interface GuxList {
    }
    interface GuxListDivider {
    }
    interface GuxListDividerLegacy {
    }
    interface GuxListItem {
        "disabled"?: boolean;
    }
    interface GuxListItemLegacy {
        /**
          * Emits when the list item is clicked, or enter/space is pressed.
         */
        "onPress"?: (event: GuxListItemLegacyCustomEvent<any>) => void;
        /**
          * How the item should be highlighted.
         */
        "strategy"?: GuxTextHighlightStrategy;
        /**
          * The value to display.
         */
        "text"?: string;
        /**
          * The value associated with this item.
         */
        "value"?: any;
    }
    interface GuxListLegacy {
        /**
          * The highlight value
         */
        "highlight"?: string;
        /**
          * Triggered when the list's selection is changed.
         */
        "onChanged"?: (event: GuxListLegacyCustomEvent<unknown>) => void;
        /**
          * The current selection in the list.
         */
        "value"?: unknown;
    }
    /**
     * The listbox component provides keyboard bindings and a11y patterns for selecting
     * from a list of options.
     */
    interface GuxListbox {
        "filter"?: string;
        "filterType"?: GuxFilterTypes;
        "loading"?: boolean;
        "onInternallistboxoptionsupdated"?: (event: GuxListboxCustomEvent<any>) => void;
        "value"?: string;
    }
    interface GuxListboxMulti {
        "filter"?: string;
        "filterType"?: GuxFilterTypes;
        "hasExactMatch"?: boolean;
        "loading"?: boolean;
        "onInternallistboxoptionsupdated"?: (event: GuxListboxMultiCustomEvent<any>) => void;
        "textInput"?: string;
        "value"?: string;
    }
    interface GuxLoadingMessageBeta {
    }
    interface GuxMenu {
    }
    interface GuxMenuOption {
    }
    interface GuxModal {
        /**
          * Query selector for the element to initially focus when the modal opens Defaults to the first tabbable element
         */
        "initialFocus"?: string | undefined;
        /**
          * Fired when a user dismisses the modal (The default behaviour is to remove the component from the DOM)
         */
        "onGuxdismiss"?: (event: GuxModalCustomEvent<void>) => void;
        /**
          * Indicates the size of the modal (small, medium or large)
         */
        "size"?: GuxModalSize;
        "trapFocus"?: boolean;
    }
    interface GuxMonthCalendar {
        /**
          * The max year and month selectable in ISO8601 format (yyyy-mm)
         */
        "max"?: GuxISOYearMonth;
        /**
          * The min year and month selectable in ISO8601 format (yyyy-mm)
         */
        "min"?: GuxISOYearMonth;
        /**
          * The current selected year and month in ISO8601 format (yyyy-mm)
         */
        "value"?: GuxISOYearMonth;
    }
    interface GuxMonthList {
    }
    interface GuxMonthListItem {
        "disabled"?: boolean;
        "selected"?: boolean;
        "value"?: GuxISOYearMonth;
    }
    interface GuxMonthPickerBeta {
        "disabled"?: boolean;
        /**
          * The max year and month selectable in ISO8601 format (yyyy-mm)
         */
        "max"?: GuxISOYearMonth;
        /**
          * The min year and month selectable in ISO8601 format (yyyy-mm)
         */
        "min"?: GuxISOYearMonth;
        /**
          * The current selected year and month in ISO8601 format (yyyy-mm)
         */
        "value"?: GuxISOYearMonth;
    }
    interface GuxNotificationToast {
        /**
          * The component accent.
         */
        "accent"?: GuxNotificationToastAccent;
        "onGuxdismiss"?: (event: GuxNotificationToastCustomEvent<void>) => void;
    }
    interface GuxOption {
        "active"?: boolean;
        "disabled"?: boolean;
        "filtered"?: boolean;
        "hovered"?: boolean;
        "selected"?: boolean;
        "value"?: string;
    }
    interface GuxOptionIcon {
        "active"?: boolean;
        "disabled"?: boolean;
        "filtered"?: boolean;
        "hovered"?: boolean;
        "iconColor"?: string;
        "iconName"?: string;
        "iconSrText"?: string;
        "selected"?: boolean;
        "value"?: string;
    }
    interface GuxOptionLegacy {
        /**
          * If this Boolean attribute is set, this option is not checkable. It won't receive any browsing events, like mouse clicks or focus-related ones.
         */
        "disabled"?: boolean;
        "selected"?: boolean;
        /**
          * The content of this attribute represents the value to be displayed, If this attribute is omitted, the value is taken from the text content of the slot. This attribute takes precedence over slot value
         */
        "text"?: string;
        /**
          * The content of this attribute represents the value to be submitted on 'input' changes, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.
         */
        "value"?: string;
    }
    interface GuxOptionMulti {
        "active"?: boolean;
        "custom"?: boolean;
        "disabled"?: boolean;
        "filtered"?: boolean;
        "hovered"?: boolean;
        "onGuxremovecustomoption"?: (event: GuxOptionMultiCustomEvent<string>) => void;
        "onInternalselectcustomoption"?: (event: GuxOptionMultiCustomEvent<string>) => void;
        "selected"?: boolean;
        "value"?: string;
    }
    interface GuxPageLoadingSpinner {
        /**
          * Localized text to provide an accessible label for the component. If no screenreader text is provided, the localized string "Loading" will be used by default
         */
        "screenreaderText"?: string;
    }
    interface GuxPagination {
        /**
          * The currently select page. Changes are watched by the component.
         */
        "currentPage"?: number;
        /**
          * The max number of items on a page. Used to calculate total page count
         */
        "itemsPerPage"?: GuxItemsPerPage;
        /**
          * The pagination component can have different layouts to suit the available space
         */
        "layout"?: GuxPaginationLayout;
        "onGuxpaginationchange"?: (event: GuxPaginationCustomEvent<GuxPaginationState>) => void;
        /**
          * The total number of items in the data set. Used to calculate total page count
         */
        "totalItems"?: number;
    }
    interface GuxPaginationBeta {
        /**
          * The currently select page. Changes are watched by the component.
         */
        "currentPage"?: number;
        /**
          * The max number of items on a page. Used to calculate total page count
         */
        "itemsPerPage"?: GuxItemsPerPage;
        /**
          * The pagination component can have different layouts to suit the available space
         */
        "layout"?: GuxPaginationLayoutBeta;
        "onGuxpaginationchange"?: (event: GuxPaginationBetaCustomEvent<GuxPaginationState>) => void;
        /**
          * The total number of items in the data set. Used to calculate total page count
         */
        "totalItems"?: number;
    }
    interface GuxPaginationButtons {
        "currentPage"?: number;
        "layout"?: GuxPaginationLayout;
        "onInternalcurrentpagechange"?: (event: GuxPaginationButtonsCustomEvent<number>) => void;
        "totalPages"?: number;
    }
    interface GuxPaginationButtonsBeta {
        "currentPage"?: number;
        "layout"?: GuxPaginationLayoutBeta;
        "onInternalcurrentpagechange"?: (event: GuxPaginationButtonsBetaCustomEvent<number>) => void;
        "totalPages"?: number;
    }
    interface GuxPaginationCursor {
        "hasNext"?: boolean;
        "hasPrevious"?: boolean;
        "onGuxPaginationCursorchange"?: (event: GuxPaginationCursorCustomEvent<GuxPaginationCursorDetail>) => void;
    }
    interface GuxPaginationItemCounts {
        "currentPage"?: number;
        "itemsPerPage"?: number;
        "totalItems"?: number;
    }
    interface GuxPaginationItemCountsBeta {
        "currentPage"?: number;
        "itemsPerPage"?: number;
        "totalItems"?: number;
    }
    interface GuxPaginationItemsPerPage {
        "itemsPerPage"?: GuxItemsPerPage;
        "onInternalitemsperpagechange"?: (event: GuxPaginationItemsPerPageCustomEvent<number>) => void;
    }
    interface GuxPaginationItemsPerPageBeta {
        "itemsPerPage"?: GuxItemsPerPage1;
        "onInternalitemsperpagechange"?: (event: GuxPaginationItemsPerPageBetaCustomEvent<number>) => void;
    }
    interface GuxPanelFrameLegacy {
    }
    interface GuxPhoneInputBeta {
        "defaultRegion"?: string;
        "disabled"?: boolean;
        "hasError"?: boolean;
        "labelId"?: string;
        "onInput"?: (event: GuxPhoneInputBetaCustomEvent<string>) => void;
        "onInternalError"?: (event: GuxPhoneInputBetaCustomEvent<boolean>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface GuxPopover {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton"?: boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for"?: string;
        /**
          * Fired when a user dismisses the popover
         */
        "onGuxdismiss"?: (event: GuxPopoverCustomEvent<void>) => void;
        /**
          * Indicate position of popover element arrow (follow popper js position attribute api)
         */
        "position"?: PopperPosition;
    }
    interface GuxPopoverBeta {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton"?: boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for"?: string;
        "isOpen"?: boolean;
        /**
          * Fired when a user dismisses the popover
         */
        "onGuxdismiss"?: (event: GuxPopoverBetaCustomEvent<void>) => void;
        /**
          * Indicate position of popover element arrow (follow floating ui placement attribute api)
         */
        "position"?: Placement;
    }
    interface GuxPopoverList {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton"?: boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for"?: string;
        /**
          * Fired when a user dismisses the popover
         */
        "onGuxdismiss"?: (event: GuxPopoverListCustomEvent<void>) => void;
        /**
          * Indicate position of popover element arrow (follow popper js position attribute api)
         */
        "position"?: PopperPosition1;
    }
    interface GuxPopoverListBeta {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Indicate if the dismiss button is displayed
         */
        "displayDismissButton"?: boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for"?: string;
        "isOpen"?: boolean;
        /**
          * Fired when a user dismisses the popover
         */
        "onGuxdismiss"?: (event: GuxPopoverListBetaCustomEvent<void>) => void;
        /**
          * Indicate position of popover element arrow (follow floating ui placement attribute api)
         */
        "position"?: Placement;
    }
    interface GuxPopup {
        "disabled"?: boolean;
        "expanded"?: boolean;
        /**
          * This event will run when the popup transitions to a collapsed state.
         */
        "onInternalcollapsed"?: (event: GuxPopupCustomEvent<void>) => void;
        /**
          * This event will run when the popup transitions to an expanded state.
         */
        "onInternalexpanded"?: (event: GuxPopupCustomEvent<void>) => void;
    }
    interface GuxPopupBeta {
        "disabled"?: boolean;
        "expanded"?: boolean;
        /**
          * This event will run when the popup transitions to a collapsed state.
         */
        "onInternalcollapsed"?: (event: GuxPopupBetaCustomEvent<void>) => void;
        /**
          * This event will run when the popup transitions to an expanded state.
         */
        "onInternalexpanded"?: (event: GuxPopupBetaCustomEvent<void>) => void;
    }
    interface GuxRadialLoading {
        /**
          * The display context the component is in.
         */
        "context"?: GuxRadialLoadingContext;
        /**
          * Localized text to provide an accessible label for the component. If no screenreader text is provided, the localized string "Loading" will be used by default.
         */
        "screenreaderText"?: string;
    }
    interface GuxRadialProgress {
        /**
          * The max value of the progress spinner
         */
        "max"?: number;
        /**
          * The max number of decimal places that will be displayed
         */
        "scale"?: GuxRadialProgressScale;
        /**
          * Required localized text to provide an accessible label for the component
         */
        "screenreaderText"?: string;
        /**
          * The progress made in the progress spinner compared to the max value
         */
        "value"?: number;
    }
    interface GuxRating {
        "disabled"?: boolean;
        "maxValue"?: number;
        "readonly"?: boolean;
        "value"?: number;
    }
    interface GuxRegionIcon {
        "region"?: string;
    }
    interface GuxRowSelect {
        "disabled"?: boolean;
        "onInternalrowselectchange"?: (event: GuxRowSelectCustomEvent<any>) => void;
        "selected"?: boolean;
    }
    interface GuxScreenReaderBeta {
    }
    interface GuxSidePanelButton {
        "altText"?: string;
        "icon"?: string;
        "isSelected"?: boolean;
    }
    interface GuxSidePanelLegacy {
        /**
          * Open or close the content
         */
        "isOpen"?: boolean;
        /**
          * The position of the side panel
         */
        "position"?: 'left' | 'right';
    }
    interface GuxSimpleToast {
        /**
          * The component accent.
         */
        "accent"?: GuxSimpleToastAccent;
        "onGuxdismiss"?: (event: GuxSimpleToastCustomEvent<void>) => void;
    }
    interface GuxSkipNavigationItem {
    }
    interface GuxSkipNavigationListBeta {
    }
    interface GuxSortControl {
        "includeUnsorted"?: boolean;
        "onGuxsortchanged"?: (event: GuxSortControlCustomEvent<GuxTableSortState>) => void;
    }
    interface GuxSubmenu {
        "label"?: string;
    }
    interface GuxSwitch {
        "layout"?: GuxSwitchAllowedLayouts;
        "value"?: string;
    }
    interface GuxSwitchItem {
        "disabled"?: boolean;
        "selected"?: boolean;
        "value"?: string;
    }
    interface GuxTab {
        /**
          * Specifies if tab is disabled
         */
        "guxDisabled"?: boolean;
        "onInternalactivatetabpanel"?: (event: GuxTabCustomEvent<string>) => void;
        /**
          * Tab id for the tab
         */
        "tabId"?: string;
    }
    interface GuxTabAdvanced {
        "guxDisabled"?: boolean;
        "onInternalactivatetabpanel"?: (event: GuxTabAdvancedCustomEvent<string>) => void;
        /**
          * unique id for the tab
         */
        "tabId"?: string;
    }
    interface GuxTabAdvancedList {
        /**
          * Enable tab sorting by drag/drop
         */
        "allowSort"?: boolean;
        /**
          * Triggers when the new tab button is selected.
         */
        "onNewTab"?: (event: GuxTabAdvancedListCustomEvent<any>) => void;
        /**
          * Triggers when the sorting of the tabs is changed.
         */
        "onSortChanged"?: (event: GuxTabAdvancedListCustomEvent<string[]>) => void;
        /**
          * Enable new tab button
         */
        "showNewTabButton"?: boolean;
        /**
          * Maximum nuber of tabs created
         */
        "tabLimit"?: number;
    }
    interface GuxTabAdvancedPanel {
        "onGuxactivepanelchange"?: (event: GuxTabAdvancedPanelCustomEvent<string>) => void;
        "tabId"?: string;
    }
    interface GuxTabDropdownOptionLegacy {
        /**
          * name of the gux-icon to display for the option
         */
        "iconName"?: string;
        /**
          * unique id for the option
         */
        "optionId"?: string;
    }
    interface GuxTabLegacy {
        /**
          * indicates whether or not the tab is selected
         */
        "active"?: boolean;
        "onInternaltabselected"?: (event: GuxTabLegacyCustomEvent<void>) => void;
        /**
          * indicates the gux-icon to display on the left side of the tab (similar to a favicon in the browser)
         */
        "tabIconName"?: string;
        /**
          * unique id for the tab
         */
        "tabId"?: string;
    }
    interface GuxTabList {
    }
    interface GuxTabPanel {
        /**
          * Triggers when the active panel changes
         */
        "onGuxactivepanelchange"?: (event: GuxTabPanelCustomEvent<string>) => void;
        /**
          * Tab id of the tab that is associated with the panel
         */
        "tabId"?: string;
    }
    interface GuxTabPanelBeta {
        /**
          * Triggers when the active panel changes
         */
        "onGuxactivepanelchange"?: (event: GuxTabPanelBetaCustomEvent<string>) => void;
        /**
          * Tab id of the tab that is associated with the panel
         */
        "tabId"?: string;
    }
    interface GuxTableBeta {
        /**
          * Indicates table row density style
         */
        "compact"?: boolean;
        /**
          * Represents info message that should be displayed for empty table
         */
        "emptyMessage"?: string;
        /**
          * Indicates that object table specific styles should be applied
         */
        "objectTable"?: boolean;
        /**
          * Triggers when table row was selected/unselected
         */
        "onGuxselectionchanged"?: (event: GuxTableBetaCustomEvent<GuxTableSelectedState>) => void;
        /**
          * Triggers when the sorting of the table column is changed.
         */
        "onGuxsortchanged"?: (event: GuxTableBetaCustomEvent<GuxTableSortState>) => void;
        /**
          * Indicates that table should have resizable columns
         */
        "resizableColumns"?: boolean;
    }
    interface GuxTableSelectMenu {
        "dropdownDisabled"?: boolean;
    }
    interface GuxTableSelectPopover {
        /**
          * Close popover when the user clicks outside of its bounds
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Indicates the id of the element the popover should anchor to
         */
        "for"?: string;
        /**
          * Fired when a user dismisses the popover
         */
        "onGuxdismiss"?: (event: GuxTableSelectPopoverCustomEvent<void>) => void;
    }
    interface GuxTableToolbarAction {
        "accent"?: GuxTableToolbarActionAccent;
        "action"?: GuxTableToolbarActionTypes;
        "disabled"?: boolean;
        "iconOnly"?: boolean;
    }
    interface GuxTableToolbarBeta {
    }
    interface GuxTableToolbarCustomAction {
        "accent"?: GuxTableToolbarActionAccent;
        "disabled"?: boolean;
        "iconOnly"?: boolean;
    }
    interface GuxTableToolbarMenuButton {
        "showMenu"?: boolean;
    }
    interface GuxTabs {
        /**
          * tabId of the currently selected tab
         */
        "activeTab"?: string;
        /**
          * Specifies left aligned, centered, or full width tabs
         */
        "alignment"?: GuxTabsAlignment;
        /**
          * Triggers when the active tab changes.
         */
        "onGuxactivetabchange"?: (event: GuxTabsCustomEvent<string>) => void;
        /**
          * Specifies horizontal or vertical orientation of tabs
         */
        "orientation"?: GuxTabsOrientation;
    }
    interface GuxTabsAdvanced {
        /**
          * tabId of the currently selected tab
         */
        "activeTab"?: string;
        /**
          * Triggers when the active tab changes.
         */
        "onGuxactivetabchange"?: (event: GuxTabsAdvancedCustomEvent<string>) => void;
    }
    interface GuxTabsLegacy {
        /**
          * Enable tab sorting by drag/drop
         */
        "allowSort"?: boolean;
        /**
          * Triggers when a tab is selected.
         */
        "onInput"?: (event: GuxTabsLegacyCustomEvent<any>) => void;
        /**
          * Triggers when the new tab button is selected.
         */
        "onNewTab"?: (event: GuxTabsLegacyCustomEvent<any>) => void;
        /**
          * Triggers when the sorting of the tabs is changed.
         */
        "onSortChanged"?: (event: GuxTabsLegacyCustomEvent<string[]>) => void;
        /**
          * Enable new tab button
         */
        "showNewTabButton"?: boolean;
        /**
          * Maximum nuber of tabs created
         */
        "tabLimit"?: number;
        /**
          * tabId of the currently selected tab
         */
        "value"?: string;
    }
    interface GuxTagBeta {
        /**
          * Tag background color.
         */
        "color"?: GuxTagColor;
        /**
          * Tag is removable.
         */
        "disabled"?: boolean;
        /**
          * Triggered when click on remove button
         */
        "onGuxdelete"?: (event: GuxTagBetaCustomEvent<string>) => void;
        /**
          * Tag is removable.
         */
        "removable"?: boolean;
        /**
          * Index for remove tag
         */
        "value"?: string;
    }
    interface GuxTextHighlight {
        /**
          * The text to highlight.
         */
        "highlight"?: string;
        /**
          * The way the text should be highlighted.
         */
        "strategy"?: GuxTextHighlightStrategy;
        /**
          * The value to display.
         */
        "text"?: string;
    }
    interface GuxTextLabelLegacy {
        /**
          * The string of text to use for the label.  If the 'label' slot is provided, that dom will be used instead of this property.
         */
        "label"?: string;
        /**
          * The position of the label relative to its contained element.
         */
        "position"?: 'above' | 'beside';
    }
    interface GuxTimeBeta {
        /**
          * The ISO string representation of the time to format
         */
        "datetime"?: string;
        /**
          * Format option type
         */
        "format"?: GuxDateTimeFormat;
    }
    interface GuxTimePickerBeta {
        "clockType"?: GuxClockType;
        "disabled"?: boolean;
        "hasError"?: boolean;
        "interval"?: GuxMinuteInterval;
        "required"?: boolean;
        "step"?: GuxMinuteStep;
        "value"?: GuxISOHourMinute;
    }
    interface GuxToggle {
        "checked"?: boolean;
        "checkedLabel"?: string;
        "disabled"?: boolean;
        "displayInline"?: boolean;
        "errorMessage"?: string;
        "labelPosition"?: GuxToggleLabelPosition;
        "loading"?: boolean;
        "onCheck"?: (event: GuxToggleCustomEvent<boolean>) => void;
        "uncheckedLabel"?: string;
    }
    interface GuxToggleSlider {
        "checked"?: boolean;
        "disabled"?: boolean;
        "errorId"?: string;
        "guxAriaLabel"?: string;
        "labelId"?: string;
    }
    interface GuxTooltip {
        /**
          * Indicates the id of the element the popover should anchor to. (If not supplied the parent element is used)
         */
        "for"?: string;
        /**
          * Placement of the tooltip. Default is bottom-start
         */
        "placement"?: Placement;
    }
    interface GuxTooltipTitle {
    }
    interface GuxTruncateBeta {
        /**
          * Lines to wrap before truncating
         */
        "maxLines"?: number;
    }
    interface GuxVisualizationBeta {
        "embedOptions"?: EmbedOptions;
        "onChartClicked"?: (event: GuxVisualizationBetaCustomEvent<any>) => void;
        "onChartComponentReady"?: (event: GuxVisualizationBetaCustomEvent<any>) => void;
        "visualizationSpec"?: VisualizationSpec;
    }
    interface IntrinsicElements {
        "gux-accordion": GuxAccordion;
        "gux-accordion-legacy": GuxAccordionLegacy;
        "gux-accordion-section": GuxAccordionSection;
        "gux-action-button": GuxActionButton;
        "gux-action-button-legacy": GuxActionButtonLegacy;
        "gux-action-item": GuxActionItem;
        "gux-action-list-divider": GuxActionListDivider;
        "gux-action-list-legacy": GuxActionListLegacy;
        "gux-action-toast": GuxActionToast;
        "gux-advanced-dropdown": GuxAdvancedDropdown;
        "gux-all-row-select": GuxAllRowSelect;
        "gux-announce-beta": GuxAnnounceBeta;
        "gux-badge-beta": GuxBadgeBeta;
        "gux-blank-state-beta": GuxBlankStateBeta;
        "gux-breadcrumb-item": GuxBreadcrumbItem;
        "gux-breadcrumbs": GuxBreadcrumbs;
        "gux-button": GuxButton;
        "gux-button-multi": GuxButtonMulti;
        "gux-button-multi-legacy": GuxButtonMultiLegacy;
        "gux-button-slot-beta": GuxButtonSlotBeta;
        "gux-calendar": GuxCalendar;
        "gux-card-beta": GuxCardBeta;
        "gux-chart-column-beta": GuxChartColumnBeta;
        "gux-chart-donut-beta": GuxChartDonutBeta;
        "gux-chart-line-beta": GuxChartLineBeta;
        "gux-chart-pie-beta": GuxChartPieBeta;
        "gux-chart-scatter-plot-beta": GuxChartScatterPlotBeta;
        "gux-color-select": GuxColorSelect;
        "gux-column-manager-beta": GuxColumnManagerBeta;
        "gux-column-manager-item": GuxColumnManagerItem;
        "gux-command-action": GuxCommandAction;
        "gux-command-palette-legacy": GuxCommandPaletteLegacy;
        "gux-content-search": GuxContentSearch;
        "gux-context-menu-beta": GuxContextMenuBeta;
        "gux-copy-to-clipboard-beta": GuxCopyToClipboardBeta;
        "gux-create-option": GuxCreateOption;
        "gux-date-beta": GuxDateBeta;
        "gux-date-time-beta": GuxDateTimeBeta;
        "gux-datepicker": GuxDatepicker;
        "gux-disclosure-button": GuxDisclosureButton;
        "gux-dismiss-button": GuxDismissButton;
        "gux-dropdown": GuxDropdown;
        "gux-dropdown-legacy": GuxDropdownLegacy;
        "gux-dropdown-multi-beta": GuxDropdownMultiBeta;
        "gux-dropdown-multi-tag": GuxDropdownMultiTag;
        "gux-dropdown-option": GuxDropdownOption;
        "gux-error-message-beta": GuxErrorMessageBeta;
        "gux-flyout-menu-beta": GuxFlyoutMenuBeta;
        "gux-form-field-checkbox": GuxFormFieldCheckbox;
        "gux-form-field-color": GuxFormFieldColor;
        "gux-form-field-dropdown": GuxFormFieldDropdown;
        "gux-form-field-input-clear-button": GuxFormFieldInputClearButton;
        "gux-form-field-legacy": GuxFormFieldLegacy;
        "gux-form-field-number": GuxFormFieldNumber;
        "gux-form-field-phone": GuxFormFieldPhone;
        "gux-form-field-radio": GuxFormFieldRadio;
        "gux-form-field-range": GuxFormFieldRange;
        "gux-form-field-search": GuxFormFieldSearch;
        "gux-form-field-select": GuxFormFieldSelect;
        "gux-form-field-text-like": GuxFormFieldTextLike;
        "gux-form-field-textarea": GuxFormFieldTextarea;
        "gux-form-field-time-picker": GuxFormFieldTimePicker;
        "gux-icon": GuxIcon;
        "gux-inline-alert-beta": GuxInlineAlertBeta;
        "gux-input-checkbox": GuxInputCheckbox;
        "gux-input-color": GuxInputColor;
        "gux-input-color-option": GuxInputColorOption;
        "gux-input-number": GuxInputNumber;
        "gux-input-radio": GuxInputRadio;
        "gux-input-range": GuxInputRange;
        "gux-input-search": GuxInputSearch;
        "gux-input-select": GuxInputSelect;
        "gux-input-text-like": GuxInputTextLike;
        "gux-input-textarea": GuxInputTextarea;
        "gux-list": GuxList;
        "gux-list-divider": GuxListDivider;
        "gux-list-divider-legacy": GuxListDividerLegacy;
        "gux-list-item": GuxListItem;
        "gux-list-item-legacy": GuxListItemLegacy;
        "gux-list-legacy": GuxListLegacy;
        "gux-listbox": GuxListbox;
        "gux-listbox-multi": GuxListboxMulti;
        "gux-loading-message-beta": GuxLoadingMessageBeta;
        "gux-menu": GuxMenu;
        "gux-menu-option": GuxMenuOption;
        "gux-modal": GuxModal;
        "gux-month-calendar": GuxMonthCalendar;
        "gux-month-list": GuxMonthList;
        "gux-month-list-item": GuxMonthListItem;
        "gux-month-picker-beta": GuxMonthPickerBeta;
        "gux-notification-toast": GuxNotificationToast;
        "gux-option": GuxOption;
        "gux-option-icon": GuxOptionIcon;
        "gux-option-legacy": GuxOptionLegacy;
        "gux-option-multi": GuxOptionMulti;
        "gux-page-loading-spinner": GuxPageLoadingSpinner;
        "gux-pagination": GuxPagination;
        "gux-pagination-beta": GuxPaginationBeta;
        "gux-pagination-buttons": GuxPaginationButtons;
        "gux-pagination-buttons-beta": GuxPaginationButtonsBeta;
        "gux-pagination-cursor": GuxPaginationCursor;
        "gux-pagination-item-counts": GuxPaginationItemCounts;
        "gux-pagination-item-counts-beta": GuxPaginationItemCountsBeta;
        "gux-pagination-items-per-page": GuxPaginationItemsPerPage;
        "gux-pagination-items-per-page-beta": GuxPaginationItemsPerPageBeta;
        "gux-panel-frame-legacy": GuxPanelFrameLegacy;
        "gux-phone-input-beta": GuxPhoneInputBeta;
        "gux-popover": GuxPopover;
        "gux-popover-beta": GuxPopoverBeta;
        "gux-popover-list": GuxPopoverList;
        "gux-popover-list-beta": GuxPopoverListBeta;
        "gux-popup": GuxPopup;
        "gux-popup-beta": GuxPopupBeta;
        "gux-radial-loading": GuxRadialLoading;
        "gux-radial-progress": GuxRadialProgress;
        "gux-rating": GuxRating;
        "gux-region-icon": GuxRegionIcon;
        "gux-row-select": GuxRowSelect;
        "gux-screen-reader-beta": GuxScreenReaderBeta;
        "gux-side-panel-button": GuxSidePanelButton;
        "gux-side-panel-legacy": GuxSidePanelLegacy;
        "gux-simple-toast": GuxSimpleToast;
        "gux-skip-navigation-item": GuxSkipNavigationItem;
        "gux-skip-navigation-list-beta": GuxSkipNavigationListBeta;
        "gux-sort-control": GuxSortControl;
        "gux-submenu": GuxSubmenu;
        "gux-switch": GuxSwitch;
        "gux-switch-item": GuxSwitchItem;
        "gux-tab": GuxTab;
        "gux-tab-advanced": GuxTabAdvanced;
        "gux-tab-advanced-list": GuxTabAdvancedList;
        "gux-tab-advanced-panel": GuxTabAdvancedPanel;
        "gux-tab-dropdown-option-legacy": GuxTabDropdownOptionLegacy;
        "gux-tab-legacy": GuxTabLegacy;
        "gux-tab-list": GuxTabList;
        "gux-tab-panel": GuxTabPanel;
        "gux-tab-panel-beta": GuxTabPanelBeta;
        "gux-table-beta": GuxTableBeta;
        "gux-table-select-menu": GuxTableSelectMenu;
        "gux-table-select-popover": GuxTableSelectPopover;
        "gux-table-toolbar-action": GuxTableToolbarAction;
        "gux-table-toolbar-beta": GuxTableToolbarBeta;
        "gux-table-toolbar-custom-action": GuxTableToolbarCustomAction;
        "gux-table-toolbar-menu-button": GuxTableToolbarMenuButton;
        "gux-tabs": GuxTabs;
        "gux-tabs-advanced": GuxTabsAdvanced;
        "gux-tabs-legacy": GuxTabsLegacy;
        "gux-tag-beta": GuxTagBeta;
        "gux-text-highlight": GuxTextHighlight;
        "gux-text-label-legacy": GuxTextLabelLegacy;
        "gux-time-beta": GuxTimeBeta;
        "gux-time-picker-beta": GuxTimePickerBeta;
        "gux-toggle": GuxToggle;
        "gux-toggle-slider": GuxToggleSlider;
        "gux-tooltip": GuxTooltip;
        "gux-tooltip-title": GuxTooltipTitle;
        "gux-truncate-beta": GuxTruncateBeta;
        "gux-visualization-beta": GuxVisualizationBeta;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gux-accordion": LocalJSX.GuxAccordion & JSXBase.HTMLAttributes<HTMLGuxAccordionElement>;
            "gux-accordion-legacy": LocalJSX.GuxAccordionLegacy & JSXBase.HTMLAttributes<HTMLGuxAccordionLegacyElement>;
            "gux-accordion-section": LocalJSX.GuxAccordionSection & JSXBase.HTMLAttributes<HTMLGuxAccordionSectionElement>;
            "gux-action-button": LocalJSX.GuxActionButton & JSXBase.HTMLAttributes<HTMLGuxActionButtonElement>;
            "gux-action-button-legacy": LocalJSX.GuxActionButtonLegacy & JSXBase.HTMLAttributes<HTMLGuxActionButtonLegacyElement>;
            "gux-action-item": LocalJSX.GuxActionItem & JSXBase.HTMLAttributes<HTMLGuxActionItemElement>;
            "gux-action-list-divider": LocalJSX.GuxActionListDivider & JSXBase.HTMLAttributes<HTMLGuxActionListDividerElement>;
            "gux-action-list-legacy": LocalJSX.GuxActionListLegacy & JSXBase.HTMLAttributes<HTMLGuxActionListLegacyElement>;
            "gux-action-toast": LocalJSX.GuxActionToast & JSXBase.HTMLAttributes<HTMLGuxActionToastElement>;
            "gux-advanced-dropdown": LocalJSX.GuxAdvancedDropdown & JSXBase.HTMLAttributes<HTMLGuxAdvancedDropdownElement>;
            "gux-all-row-select": LocalJSX.GuxAllRowSelect & JSXBase.HTMLAttributes<HTMLGuxAllRowSelectElement>;
            "gux-announce-beta": LocalJSX.GuxAnnounceBeta & JSXBase.HTMLAttributes<HTMLGuxAnnounceBetaElement>;
            "gux-badge-beta": LocalJSX.GuxBadgeBeta & JSXBase.HTMLAttributes<HTMLGuxBadgeBetaElement>;
            "gux-blank-state-beta": LocalJSX.GuxBlankStateBeta & JSXBase.HTMLAttributes<HTMLGuxBlankStateBetaElement>;
            "gux-breadcrumb-item": LocalJSX.GuxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLGuxBreadcrumbItemElement>;
            "gux-breadcrumbs": LocalJSX.GuxBreadcrumbs & JSXBase.HTMLAttributes<HTMLGuxBreadcrumbsElement>;
            "gux-button": LocalJSX.GuxButton & JSXBase.HTMLAttributes<HTMLGuxButtonElement>;
            "gux-button-multi": LocalJSX.GuxButtonMulti & JSXBase.HTMLAttributes<HTMLGuxButtonMultiElement>;
            "gux-button-multi-legacy": LocalJSX.GuxButtonMultiLegacy & JSXBase.HTMLAttributes<HTMLGuxButtonMultiLegacyElement>;
            "gux-button-slot-beta": LocalJSX.GuxButtonSlotBeta & JSXBase.HTMLAttributes<HTMLGuxButtonSlotBetaElement>;
            "gux-calendar": LocalJSX.GuxCalendar & JSXBase.HTMLAttributes<HTMLGuxCalendarElement>;
            "gux-card-beta": LocalJSX.GuxCardBeta & JSXBase.HTMLAttributes<HTMLGuxCardBetaElement>;
            "gux-chart-column-beta": LocalJSX.GuxChartColumnBeta & JSXBase.HTMLAttributes<HTMLGuxChartColumnBetaElement>;
            "gux-chart-donut-beta": LocalJSX.GuxChartDonutBeta & JSXBase.HTMLAttributes<HTMLGuxChartDonutBetaElement>;
            "gux-chart-line-beta": LocalJSX.GuxChartLineBeta & JSXBase.HTMLAttributes<HTMLGuxChartLineBetaElement>;
            "gux-chart-pie-beta": LocalJSX.GuxChartPieBeta & JSXBase.HTMLAttributes<HTMLGuxChartPieBetaElement>;
            "gux-chart-scatter-plot-beta": LocalJSX.GuxChartScatterPlotBeta & JSXBase.HTMLAttributes<HTMLGuxChartScatterPlotBetaElement>;
            "gux-color-select": LocalJSX.GuxColorSelect & JSXBase.HTMLAttributes<HTMLGuxColorSelectElement>;
            "gux-column-manager-beta": LocalJSX.GuxColumnManagerBeta & JSXBase.HTMLAttributes<HTMLGuxColumnManagerBetaElement>;
            "gux-column-manager-item": LocalJSX.GuxColumnManagerItem & JSXBase.HTMLAttributes<HTMLGuxColumnManagerItemElement>;
            "gux-command-action": LocalJSX.GuxCommandAction & JSXBase.HTMLAttributes<HTMLGuxCommandActionElement>;
            "gux-command-palette-legacy": LocalJSX.GuxCommandPaletteLegacy & JSXBase.HTMLAttributes<HTMLGuxCommandPaletteLegacyElement>;
            "gux-content-search": LocalJSX.GuxContentSearch & JSXBase.HTMLAttributes<HTMLGuxContentSearchElement>;
            "gux-context-menu-beta": LocalJSX.GuxContextMenuBeta & JSXBase.HTMLAttributes<HTMLGuxContextMenuBetaElement>;
            "gux-copy-to-clipboard-beta": LocalJSX.GuxCopyToClipboardBeta & JSXBase.HTMLAttributes<HTMLGuxCopyToClipboardBetaElement>;
            "gux-create-option": LocalJSX.GuxCreateOption & JSXBase.HTMLAttributes<HTMLGuxCreateOptionElement>;
            "gux-date-beta": LocalJSX.GuxDateBeta & JSXBase.HTMLAttributes<HTMLGuxDateBetaElement>;
            "gux-date-time-beta": LocalJSX.GuxDateTimeBeta & JSXBase.HTMLAttributes<HTMLGuxDateTimeBetaElement>;
            "gux-datepicker": LocalJSX.GuxDatepicker & JSXBase.HTMLAttributes<HTMLGuxDatepickerElement>;
            "gux-disclosure-button": LocalJSX.GuxDisclosureButton & JSXBase.HTMLAttributes<HTMLGuxDisclosureButtonElement>;
            "gux-dismiss-button": LocalJSX.GuxDismissButton & JSXBase.HTMLAttributes<HTMLGuxDismissButtonElement>;
            /**
             * Our Dropdown component. In the most basic case, it's used with `gux-option` to give users
             * a list of text options to select from, but other types of options with different appearance
             * can be created by creating a new component and adding it to `validOptionTags` list in
             * gux-dropdown-types.ts, then following the resulting compiler errors.
             */
            "gux-dropdown": LocalJSX.GuxDropdown & JSXBase.HTMLAttributes<HTMLGuxDropdownElement>;
            "gux-dropdown-legacy": LocalJSX.GuxDropdownLegacy & JSXBase.HTMLAttributes<HTMLGuxDropdownLegacyElement>;
            "gux-dropdown-multi-beta": LocalJSX.GuxDropdownMultiBeta & JSXBase.HTMLAttributes<HTMLGuxDropdownMultiBetaElement>;
            "gux-dropdown-multi-tag": LocalJSX.GuxDropdownMultiTag & JSXBase.HTMLAttributes<HTMLGuxDropdownMultiTagElement>;
            "gux-dropdown-option": LocalJSX.GuxDropdownOption & JSXBase.HTMLAttributes<HTMLGuxDropdownOptionElement>;
            "gux-error-message-beta": LocalJSX.GuxErrorMessageBeta & JSXBase.HTMLAttributes<HTMLGuxErrorMessageBetaElement>;
            "gux-flyout-menu-beta": LocalJSX.GuxFlyoutMenuBeta & JSXBase.HTMLAttributes<HTMLGuxFlyoutMenuBetaElement>;
            "gux-form-field-checkbox": LocalJSX.GuxFormFieldCheckbox & JSXBase.HTMLAttributes<HTMLGuxFormFieldCheckboxElement>;
            "gux-form-field-color": LocalJSX.GuxFormFieldColor & JSXBase.HTMLAttributes<HTMLGuxFormFieldColorElement>;
            "gux-form-field-dropdown": LocalJSX.GuxFormFieldDropdown & JSXBase.HTMLAttributes<HTMLGuxFormFieldDropdownElement>;
            "gux-form-field-input-clear-button": LocalJSX.GuxFormFieldInputClearButton & JSXBase.HTMLAttributes<HTMLGuxFormFieldInputClearButtonElement>;
            "gux-form-field-legacy": LocalJSX.GuxFormFieldLegacy & JSXBase.HTMLAttributes<HTMLGuxFormFieldLegacyElement>;
            "gux-form-field-number": LocalJSX.GuxFormFieldNumber & JSXBase.HTMLAttributes<HTMLGuxFormFieldNumberElement>;
            "gux-form-field-phone": LocalJSX.GuxFormFieldPhone & JSXBase.HTMLAttributes<HTMLGuxFormFieldPhoneElement>;
            "gux-form-field-radio": LocalJSX.GuxFormFieldRadio & JSXBase.HTMLAttributes<HTMLGuxFormFieldRadioElement>;
            "gux-form-field-range": LocalJSX.GuxFormFieldRange & JSXBase.HTMLAttributes<HTMLGuxFormFieldRangeElement>;
            "gux-form-field-search": LocalJSX.GuxFormFieldSearch & JSXBase.HTMLAttributes<HTMLGuxFormFieldSearchElement>;
            "gux-form-field-select": LocalJSX.GuxFormFieldSelect & JSXBase.HTMLAttributes<HTMLGuxFormFieldSelectElement>;
            "gux-form-field-text-like": LocalJSX.GuxFormFieldTextLike & JSXBase.HTMLAttributes<HTMLGuxFormFieldTextLikeElement>;
            "gux-form-field-textarea": LocalJSX.GuxFormFieldTextarea & JSXBase.HTMLAttributes<HTMLGuxFormFieldTextareaElement>;
            "gux-form-field-time-picker": LocalJSX.GuxFormFieldTimePicker & JSXBase.HTMLAttributes<HTMLGuxFormFieldTimePickerElement>;
            "gux-icon": LocalJSX.GuxIcon & JSXBase.HTMLAttributes<HTMLGuxIconElement>;
            "gux-inline-alert-beta": LocalJSX.GuxInlineAlertBeta & JSXBase.HTMLAttributes<HTMLGuxInlineAlertBetaElement>;
            "gux-input-checkbox": LocalJSX.GuxInputCheckbox & JSXBase.HTMLAttributes<HTMLGuxInputCheckboxElement>;
            "gux-input-color": LocalJSX.GuxInputColor & JSXBase.HTMLAttributes<HTMLGuxInputColorElement>;
            "gux-input-color-option": LocalJSX.GuxInputColorOption & JSXBase.HTMLAttributes<HTMLGuxInputColorOptionElement>;
            "gux-input-number": LocalJSX.GuxInputNumber & JSXBase.HTMLAttributes<HTMLGuxInputNumberElement>;
            "gux-input-radio": LocalJSX.GuxInputRadio & JSXBase.HTMLAttributes<HTMLGuxInputRadioElement>;
            "gux-input-range": LocalJSX.GuxInputRange & JSXBase.HTMLAttributes<HTMLGuxInputRangeElement>;
            "gux-input-search": LocalJSX.GuxInputSearch & JSXBase.HTMLAttributes<HTMLGuxInputSearchElement>;
            "gux-input-select": LocalJSX.GuxInputSelect & JSXBase.HTMLAttributes<HTMLGuxInputSelectElement>;
            "gux-input-text-like": LocalJSX.GuxInputTextLike & JSXBase.HTMLAttributes<HTMLGuxInputTextLikeElement>;
            "gux-input-textarea": LocalJSX.GuxInputTextarea & JSXBase.HTMLAttributes<HTMLGuxInputTextareaElement>;
            "gux-list": LocalJSX.GuxList & JSXBase.HTMLAttributes<HTMLGuxListElement>;
            "gux-list-divider": LocalJSX.GuxListDivider & JSXBase.HTMLAttributes<HTMLGuxListDividerElement>;
            "gux-list-divider-legacy": LocalJSX.GuxListDividerLegacy & JSXBase.HTMLAttributes<HTMLGuxListDividerLegacyElement>;
            "gux-list-item": LocalJSX.GuxListItem & JSXBase.HTMLAttributes<HTMLGuxListItemElement>;
            "gux-list-item-legacy": LocalJSX.GuxListItemLegacy & JSXBase.HTMLAttributes<HTMLGuxListItemLegacyElement>;
            "gux-list-legacy": LocalJSX.GuxListLegacy & JSXBase.HTMLAttributes<HTMLGuxListLegacyElement>;
            /**
             * The listbox component provides keyboard bindings and a11y patterns for selecting
             * from a list of options.
             */
            "gux-listbox": LocalJSX.GuxListbox & JSXBase.HTMLAttributes<HTMLGuxListboxElement>;
            "gux-listbox-multi": LocalJSX.GuxListboxMulti & JSXBase.HTMLAttributes<HTMLGuxListboxMultiElement>;
            "gux-loading-message-beta": LocalJSX.GuxLoadingMessageBeta & JSXBase.HTMLAttributes<HTMLGuxLoadingMessageBetaElement>;
            "gux-menu": LocalJSX.GuxMenu & JSXBase.HTMLAttributes<HTMLGuxMenuElement>;
            "gux-menu-option": LocalJSX.GuxMenuOption & JSXBase.HTMLAttributes<HTMLGuxMenuOptionElement>;
            "gux-modal": LocalJSX.GuxModal & JSXBase.HTMLAttributes<HTMLGuxModalElement>;
            "gux-month-calendar": LocalJSX.GuxMonthCalendar & JSXBase.HTMLAttributes<HTMLGuxMonthCalendarElement>;
            "gux-month-list": LocalJSX.GuxMonthList & JSXBase.HTMLAttributes<HTMLGuxMonthListElement>;
            "gux-month-list-item": LocalJSX.GuxMonthListItem & JSXBase.HTMLAttributes<HTMLGuxMonthListItemElement>;
            "gux-month-picker-beta": LocalJSX.GuxMonthPickerBeta & JSXBase.HTMLAttributes<HTMLGuxMonthPickerBetaElement>;
            "gux-notification-toast": LocalJSX.GuxNotificationToast & JSXBase.HTMLAttributes<HTMLGuxNotificationToastElement>;
            "gux-option": LocalJSX.GuxOption & JSXBase.HTMLAttributes<HTMLGuxOptionElement>;
            "gux-option-icon": LocalJSX.GuxOptionIcon & JSXBase.HTMLAttributes<HTMLGuxOptionIconElement>;
            "gux-option-legacy": LocalJSX.GuxOptionLegacy & JSXBase.HTMLAttributes<HTMLGuxOptionLegacyElement>;
            "gux-option-multi": LocalJSX.GuxOptionMulti & JSXBase.HTMLAttributes<HTMLGuxOptionMultiElement>;
            "gux-page-loading-spinner": LocalJSX.GuxPageLoadingSpinner & JSXBase.HTMLAttributes<HTMLGuxPageLoadingSpinnerElement>;
            "gux-pagination": LocalJSX.GuxPagination & JSXBase.HTMLAttributes<HTMLGuxPaginationElement>;
            "gux-pagination-beta": LocalJSX.GuxPaginationBeta & JSXBase.HTMLAttributes<HTMLGuxPaginationBetaElement>;
            "gux-pagination-buttons": LocalJSX.GuxPaginationButtons & JSXBase.HTMLAttributes<HTMLGuxPaginationButtonsElement>;
            "gux-pagination-buttons-beta": LocalJSX.GuxPaginationButtonsBeta & JSXBase.HTMLAttributes<HTMLGuxPaginationButtonsBetaElement>;
            "gux-pagination-cursor": LocalJSX.GuxPaginationCursor & JSXBase.HTMLAttributes<HTMLGuxPaginationCursorElement>;
            "gux-pagination-item-counts": LocalJSX.GuxPaginationItemCounts & JSXBase.HTMLAttributes<HTMLGuxPaginationItemCountsElement>;
            "gux-pagination-item-counts-beta": LocalJSX.GuxPaginationItemCountsBeta & JSXBase.HTMLAttributes<HTMLGuxPaginationItemCountsBetaElement>;
            "gux-pagination-items-per-page": LocalJSX.GuxPaginationItemsPerPage & JSXBase.HTMLAttributes<HTMLGuxPaginationItemsPerPageElement>;
            "gux-pagination-items-per-page-beta": LocalJSX.GuxPaginationItemsPerPageBeta & JSXBase.HTMLAttributes<HTMLGuxPaginationItemsPerPageBetaElement>;
            "gux-panel-frame-legacy": LocalJSX.GuxPanelFrameLegacy & JSXBase.HTMLAttributes<HTMLGuxPanelFrameLegacyElement>;
            "gux-phone-input-beta": LocalJSX.GuxPhoneInputBeta & JSXBase.HTMLAttributes<HTMLGuxPhoneInputBetaElement>;
            "gux-popover": LocalJSX.GuxPopover & JSXBase.HTMLAttributes<HTMLGuxPopoverElement>;
            "gux-popover-beta": LocalJSX.GuxPopoverBeta & JSXBase.HTMLAttributes<HTMLGuxPopoverBetaElement>;
            "gux-popover-list": LocalJSX.GuxPopoverList & JSXBase.HTMLAttributes<HTMLGuxPopoverListElement>;
            "gux-popover-list-beta": LocalJSX.GuxPopoverListBeta & JSXBase.HTMLAttributes<HTMLGuxPopoverListBetaElement>;
            "gux-popup": LocalJSX.GuxPopup & JSXBase.HTMLAttributes<HTMLGuxPopupElement>;
            "gux-popup-beta": LocalJSX.GuxPopupBeta & JSXBase.HTMLAttributes<HTMLGuxPopupBetaElement>;
            "gux-radial-loading": LocalJSX.GuxRadialLoading & JSXBase.HTMLAttributes<HTMLGuxRadialLoadingElement>;
            "gux-radial-progress": LocalJSX.GuxRadialProgress & JSXBase.HTMLAttributes<HTMLGuxRadialProgressElement>;
            "gux-rating": LocalJSX.GuxRating & JSXBase.HTMLAttributes<HTMLGuxRatingElement>;
            "gux-region-icon": LocalJSX.GuxRegionIcon & JSXBase.HTMLAttributes<HTMLGuxRegionIconElement>;
            "gux-row-select": LocalJSX.GuxRowSelect & JSXBase.HTMLAttributes<HTMLGuxRowSelectElement>;
            "gux-screen-reader-beta": LocalJSX.GuxScreenReaderBeta & JSXBase.HTMLAttributes<HTMLGuxScreenReaderBetaElement>;
            "gux-side-panel-button": LocalJSX.GuxSidePanelButton & JSXBase.HTMLAttributes<HTMLGuxSidePanelButtonElement>;
            "gux-side-panel-legacy": LocalJSX.GuxSidePanelLegacy & JSXBase.HTMLAttributes<HTMLGuxSidePanelLegacyElement>;
            "gux-simple-toast": LocalJSX.GuxSimpleToast & JSXBase.HTMLAttributes<HTMLGuxSimpleToastElement>;
            "gux-skip-navigation-item": LocalJSX.GuxSkipNavigationItem & JSXBase.HTMLAttributes<HTMLGuxSkipNavigationItemElement>;
            "gux-skip-navigation-list-beta": LocalJSX.GuxSkipNavigationListBeta & JSXBase.HTMLAttributes<HTMLGuxSkipNavigationListBetaElement>;
            "gux-sort-control": LocalJSX.GuxSortControl & JSXBase.HTMLAttributes<HTMLGuxSortControlElement>;
            "gux-submenu": LocalJSX.GuxSubmenu & JSXBase.HTMLAttributes<HTMLGuxSubmenuElement>;
            "gux-switch": LocalJSX.GuxSwitch & JSXBase.HTMLAttributes<HTMLGuxSwitchElement>;
            "gux-switch-item": LocalJSX.GuxSwitchItem & JSXBase.HTMLAttributes<HTMLGuxSwitchItemElement>;
            "gux-tab": LocalJSX.GuxTab & JSXBase.HTMLAttributes<HTMLGuxTabElement>;
            "gux-tab-advanced": LocalJSX.GuxTabAdvanced & JSXBase.HTMLAttributes<HTMLGuxTabAdvancedElement>;
            "gux-tab-advanced-list": LocalJSX.GuxTabAdvancedList & JSXBase.HTMLAttributes<HTMLGuxTabAdvancedListElement>;
            "gux-tab-advanced-panel": LocalJSX.GuxTabAdvancedPanel & JSXBase.HTMLAttributes<HTMLGuxTabAdvancedPanelElement>;
            "gux-tab-dropdown-option-legacy": LocalJSX.GuxTabDropdownOptionLegacy & JSXBase.HTMLAttributes<HTMLGuxTabDropdownOptionLegacyElement>;
            "gux-tab-legacy": LocalJSX.GuxTabLegacy & JSXBase.HTMLAttributes<HTMLGuxTabLegacyElement>;
            "gux-tab-list": LocalJSX.GuxTabList & JSXBase.HTMLAttributes<HTMLGuxTabListElement>;
            "gux-tab-panel": LocalJSX.GuxTabPanel & JSXBase.HTMLAttributes<HTMLGuxTabPanelElement>;
            "gux-tab-panel-beta": LocalJSX.GuxTabPanelBeta & JSXBase.HTMLAttributes<HTMLGuxTabPanelBetaElement>;
            "gux-table-beta": LocalJSX.GuxTableBeta & JSXBase.HTMLAttributes<HTMLGuxTableBetaElement>;
            "gux-table-select-menu": LocalJSX.GuxTableSelectMenu & JSXBase.HTMLAttributes<HTMLGuxTableSelectMenuElement>;
            "gux-table-select-popover": LocalJSX.GuxTableSelectPopover & JSXBase.HTMLAttributes<HTMLGuxTableSelectPopoverElement>;
            "gux-table-toolbar-action": LocalJSX.GuxTableToolbarAction & JSXBase.HTMLAttributes<HTMLGuxTableToolbarActionElement>;
            "gux-table-toolbar-beta": LocalJSX.GuxTableToolbarBeta & JSXBase.HTMLAttributes<HTMLGuxTableToolbarBetaElement>;
            "gux-table-toolbar-custom-action": LocalJSX.GuxTableToolbarCustomAction & JSXBase.HTMLAttributes<HTMLGuxTableToolbarCustomActionElement>;
            "gux-table-toolbar-menu-button": LocalJSX.GuxTableToolbarMenuButton & JSXBase.HTMLAttributes<HTMLGuxTableToolbarMenuButtonElement>;
            "gux-tabs": LocalJSX.GuxTabs & JSXBase.HTMLAttributes<HTMLGuxTabsElement>;
            "gux-tabs-advanced": LocalJSX.GuxTabsAdvanced & JSXBase.HTMLAttributes<HTMLGuxTabsAdvancedElement>;
            "gux-tabs-legacy": LocalJSX.GuxTabsLegacy & JSXBase.HTMLAttributes<HTMLGuxTabsLegacyElement>;
            "gux-tag-beta": LocalJSX.GuxTagBeta & JSXBase.HTMLAttributes<HTMLGuxTagBetaElement>;
            "gux-text-highlight": LocalJSX.GuxTextHighlight & JSXBase.HTMLAttributes<HTMLGuxTextHighlightElement>;
            "gux-text-label-legacy": LocalJSX.GuxTextLabelLegacy & JSXBase.HTMLAttributes<HTMLGuxTextLabelLegacyElement>;
            "gux-time-beta": LocalJSX.GuxTimeBeta & JSXBase.HTMLAttributes<HTMLGuxTimeBetaElement>;
            "gux-time-picker-beta": LocalJSX.GuxTimePickerBeta & JSXBase.HTMLAttributes<HTMLGuxTimePickerBetaElement>;
            "gux-toggle": LocalJSX.GuxToggle & JSXBase.HTMLAttributes<HTMLGuxToggleElement>;
            "gux-toggle-slider": LocalJSX.GuxToggleSlider & JSXBase.HTMLAttributes<HTMLGuxToggleSliderElement>;
            "gux-tooltip": LocalJSX.GuxTooltip & JSXBase.HTMLAttributes<HTMLGuxTooltipElement>;
            "gux-tooltip-title": LocalJSX.GuxTooltipTitle & JSXBase.HTMLAttributes<HTMLGuxTooltipTitleElement>;
            "gux-truncate-beta": LocalJSX.GuxTruncateBeta & JSXBase.HTMLAttributes<HTMLGuxTruncateBetaElement>;
            "gux-visualization-beta": LocalJSX.GuxVisualizationBeta & JSXBase.HTMLAttributes<HTMLGuxVisualizationBetaElement>;
        }
    }
}
